{"version":3,"file":"nettoyage-parkings.astro_astro_type_script_index_0_lang.CzikkGYl.js","sources":["../../../src/pages/nettoyage-parkings.astro?astro&type=script&index=0&lang.ts"],"sourcesContent":["  document.addEventListener('DOMContentLoaded', function() {\r\n    const form = document.getElementById('parking-form') as HTMLFormElement;\r\n    const submitBtn = document.getElementById('submit-btn') as HTMLButtonElement;\r\n    const btnText = document.getElementById('btn-text') as HTMLSpanElement;\r\n    const messageDiv = document.getElementById('form-message') as HTMLDivElement;\r\n\r\n    if (form) {\r\n      form.addEventListener('submit', async function(e) {\r\n        e.preventDefault();\r\n\r\n        // État de chargement\r\n        submitBtn.disabled = true;\r\n        btnText.textContent = 'Envoi en cours...';\r\n        messageDiv.className = 'hidden';\r\n\r\n        try {\r\n          const formData = new FormData(form);\r\n          const response = await fetch('/api/contact', {\r\n            method: 'POST',\r\n            body: formData,\r\n            headers: {\r\n              'Accept': 'application/json'\r\n            }\r\n          });\r\n\r\n          if (response.ok) {\r\n            // Succès\r\n            messageDiv.className = 'text-center p-4 rounded-lg bg-[#DCFCE7] border border-[#16A34A] text-[#15803D]';\r\n            messageDiv.textContent = 'Merci ! Votre demande a été envoyée. Nous vous recontactons sous 24h.';\r\n            form.reset();\r\n          } else {\r\n            // Erreur serveur\r\n            const errorText = await response.text();\r\n            messageDiv.className = 'text-center p-4 rounded-lg bg-[#FEE2E2] border border-[#DC2626] text-[#DC2626]';\r\n            messageDiv.textContent = errorText || 'Une erreur est survenue. Veuillez réessayer.';\r\n          }\r\n        } catch (error) {\r\n          // Erreur réseau\r\n          messageDiv.className = 'text-center p-4 rounded-lg bg-[#FEE2E2] border border-[#DC2626] text-[#DC2626]';\r\n          messageDiv.textContent = 'Erreur de connexion. Veuillez vérifier votre connexion internet.';\r\n        } finally {\r\n          // Restaurer le bouton\r\n          submitBtn.disabled = false;\r\n          btnText.textContent = 'Envoyer ma demande';\r\n          messageDiv.classList.remove('hidden');\r\n        }\r\n      });\r\n    }\r\n  });\n\n\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,"],"names":["form","submitBtn","btnText","messageDiv","e","formData","response","errorText"],"mappings":"AA+1CE,SAAS,iBAAiB,mBAAoB,UAAW,CACvD,MAAMA,EAAO,SAAS,eAAe,cAAc,EAC7CC,EAAY,SAAS,eAAe,YAAY,EAChDC,EAAU,SAAS,eAAe,UAAU,EAC5CC,EAAa,SAAS,eAAe,cAAc,EAErDH,GACFA,EAAK,iBAAiB,SAAU,eAAeI,EAAG,CAChDA,EAAE,eAAA,EAGFH,EAAU,SAAW,GACrBC,EAAQ,YAAc,oBACtBC,EAAW,UAAY,SAEvB,GAAI,CACF,MAAME,EAAW,IAAI,SAASL,CAAI,EAC5BM,EAAW,MAAM,MAAM,eAAgB,CAC3C,OAAQ,OACR,KAAMD,EACN,QAAS,CACP,OAAU,kBACZ,EACD,EAED,GAAIC,EAAS,GAEXH,EAAW,UAAY,iFACvBA,EAAW,YAAc,wEACzBH,EAAK,MAAA,MACA,CAEL,MAAMO,EAAY,MAAMD,EAAS,KAAA,EACjCH,EAAW,UAAY,iFACvBA,EAAW,YAAcI,GAAa,8CACxC,CACF,MAAgB,CAEdJ,EAAW,UAAY,iFACvBA,EAAW,YAAc,kEAC3B,QAAA,CAEEF,EAAU,SAAW,GACrBC,EAAQ,YAAc,qBACtBC,EAAW,UAAU,OAAO,QAAQ,CACtC,CACF,CAAC,CAEL,CAAC"}