---
import Layout from '~/layouts/Layout.astro';
import Button from '~/components/UI/Button.astro';
import { LINKS, PHONE_E164, PHONE_DISPLAY, withUtm, linkAttrs, anchorOn } from '~/lib/links';



// UID pour isoler l’autofill & éviter conflits si plusieurs formulaires
const uid = 'cf' + Math.random().toString(36).slice(2, 8);
const formId = `contact-form-${uid}`;


const site = 'https://klinova.fr';
const orgId = `${site}#organization`;
const lbId  = `${site}#localbusiness`;

/* --- JSON-LD (ContactPage + Organization + LocalBusiness + Fil d’Ariane) --- */
const jsonLd = [
  {
    "@context": "https://schema.org",
    "@type": "ContactPage",
    "name": "Contact Klinova",
    "url": `${site}/contact`,
    "description": "Contactez Klinova pour un devis ou une intervention de nettoyage en Île-de-France : parkings, moquettes, balcons, désinfection. Réponse sous 24h.",
    "breadcrumb": { "@id": `${site}#breadcrumb-contact` },
    "about": { "@id": orgId },
    "mainEntity": { "@id": lbId }
  },
  {
    "@context": "https://schema.org",
    "@type": "Organization",
    "@id": orgId,
    "name": "Klinova",
    "url": site,
    "logo": `${site}/images/logo-klinova.webp`,
    "brand": "Klinova",
    "description": "Société de propreté et de maintenance technique à Paris et en Île-de-France : nettoyage de parkings, moquettes, balcons et désinfection professionnelle.",
    "sameAs": [
      "https://www.linkedin.com/company/klinova"
      // "https://g.page/r/CZ8tKlinova"   // ← ajoute quand ta fiche GBP est active
    ],
    "contactPoint": [{
      "@type": "ContactPoint",
      "telephone": "+33676738661",
      "contactType": "Service client",
      "areaServed": "FR",
      "availableLanguage": ["fr"]
    }]
  },
  {
    "@context": "https://schema.org",
    "@type": "LocalBusiness",
    "@id": lbId,
    "name": "Klinova",
    "url": site,
    "image": `${site}/images/og/og-klinova-home.png`,
    "telephone": "+33676738661",
    "priceRange": "€€",
    "address": {
      "@type": "PostalAddress",
      "streetAddress": "6 rue d’Armaillé",
      "addressLocality": "Paris",
      "postalCode": "75017",
      "addressCountry": "FR"
    },
    "areaServed": { "@type": "AdministrativeArea", "name": "Île-de-France" },
    "openingHours": "Mo-Su 08:00-20:00",
    "parentOrganization": { "@id": orgId }
  },
  {
    "@context": "https://schema.org",
    "@type": "BreadcrumbList",
    "@id": `${site}#breadcrumb-contact`,
    "itemListElement": [
      { "@type": "ListItem", "position": 1, "name": "Accueil", "item": `${site}/` },
      { "@type": "ListItem", "position": 2, "name": "Contact", "item": `${site}/contact` }
    ]
  }
];
---

<Layout
  pathname={Astro.url.pathname}
  pageType="contact"
  title="Contact Klinova — Devis et intervention en Île-de-France"
  description="Besoin d’un devis ou d’une intervention ? Contactez Klinova : nettoyage de parkings, moquettes, balcons et désinfection à Paris et en Île-de-France. Réponse sous 24h."
  siteName="Klinova"
  ogImage="/images/og/og-klinova-home.png"
  ogImageAlt="Klinova — Contact pour devis de nettoyage à Paris et en Île-de-France"
  appendBrandToTitle={false}
  jsonLd={jsonLd}
>



  <main class="container-responsive section-padding">
    <!-- HERO + FORMULAIRE (above the fold) -->

<section class="contact-section">
  <div class="container-responsive">
    <!-- Header de section -->
    <div class="contact-header">
      <h1 class="contact-title">Contactez-nous</h1>
      <p class="contact-subtitle">
        Obtenez un devis personnalisé pour vos besoins de nettoyage professionnel
      </p>
      <div class="contact-badges">
        <div class="badge-item">
          <svg class="badge-icon" viewBox="0 0 24 24" fill="none" stroke="currentColor">
            <path d="M12 8v4l3 3m6-3a9 9 0 11-18 0 9 9 0 0118 0z" />
          </svg>
          <span>Réponse sous 24h ouvrées</span>
        </div>
        <div class="badge-item">
          <svg class="badge-icon" viewBox="0 0 24 24" fill="none" stroke="currentColor">
            <path d="M9 12l2 2 4-4m6 2a9 9 0 11-18 0 9 9 0 0118 0z"/>
          </svg>
          <span>Devis gratuit et sans engagement</span>
        </div>
      </div>
    </div>

    <div class="contact-grid">
      <!-- Formulaire principal -->
      <div class="form-container">
        <div class="form-card">
          <div id="formMessage" class="form-message" style="display:none;" role="status" aria-live="polite"></div>

          <form id="contactForm" action="/api/contact" method="POST" novalidate>
            <input type="text" name="website" style="display:none;" tabindex="-1" autocomplete="off">
            <input type="hidden" name="source" value="contact-page">
            <input type="hidden" name="page_path" value="/contact">
            <input type="hidden" name="rgpd" value="accepte">

            <!-- Informations personnelles -->
            <div class="form-section">
              <h3 class="section-title">Vos informations</h3>
              
              <div class="form-row">
                <div class="form-group">
                  <div class="floating-label-group">
                    <input
                      type="text"
                      id="contact-prenom"
                      name="prenom"
                      class="form-input"
                      placeholder=" "
                      required
                      autocomplete="given-name"
                    >
                    <label class="floating-label required" for="contact-prenom">Prénom</label>
                    <div class="field-border"></div>
                  </div>
                  <div class="form-error" id="error-prenom"></div>
                </div>

                <div class="form-group">
                  <div class="floating-label-group">
                    <input
                      type="text"
                      id="contact-nom"
                      name="nom"
                      class="form-input"
                      placeholder=" "
                      autocomplete="family-name"
                    >
                    <label class="floating-label" for="contact-nom">Nom / Société</label>
                    <div class="field-border"></div>
                  </div>
                </div>
              </div>

              <div class="form-row">
                <div class="form-group">
                  <div class="floating-label-group">
                    <input
                      type="email"
                      id="contact-email"
                      name="email"
                      class="form-input"
                      placeholder=" "
                      autocomplete="email"
                    >
                    <label class="floating-label" for="contact-email">Email</label>
                    <div class="field-border"></div>
                  </div>
                  <div class="form-error" id="error-email"></div>
                </div>

                <div class="form-group">
                  <div class="floating-label-group">
                    <input
                      type="tel"
                      id="contact-telephone"
                      name="telephone"
                      class="form-input"
                      placeholder=" "
                      required
                      autocomplete="tel"
                      inputmode="tel"
                    >
                    <label class="floating-label required" for="contact-telephone">Téléphone</label>
                    <div class="field-border"></div>
                  </div>
                  <div class="form-error" id="error-telephone"></div>
                </div>
              </div>

              <div class="form-group">
                <div class="floating-label-group">
                  <input
                    type="text"
                    id="contact-code-postal"
                    name="code_postal"
                    class="form-input"
                    placeholder=" "
                    inputmode="numeric"
                    maxlength="5"
                  >
                  <label class="floating-label" for="contact-code-postal">Code postal</label>
                  <div class="field-border"></div>
                </div>
              </div>
            </div>

            <!-- Type de prestation -->
            <div class="form-section">
              <h3 class="section-title">Votre demande</h3>
              
              <div class="form-group">
                <label class="select-label">Type de prestation</label>
                <div class="select-wrapper">
                  <select id="contact-prestation" name="prestation" class="form-select">
                    <option value="">Sélectionnez un service</option>
                    <option value="moquettes">Nettoyage de moquettes</option>
                    <option value="parkings">Nettoyage de parkings</option>
                    <option value="balcons-terrasses">Nettoyage balcons et terrasses</option>
                    <option value="traitement-nuisibles">Traitement anti-nuisibles</option>
                    <option value="maintenance-generale">Maintenance générale</option>
                    <option value="autre">Autre prestation</option>
                  </select>
                  <svg class="select-icon" viewBox="0 0 24 24" fill="none" stroke="currentColor">
                    <path d="m6 9 6 6 6-6"/>
                  </svg>
                </div>
              </div>

              <div class="form-group">
                <label class="select-label">Type de client</label>
                <div class="radio-group">
                  <label class="radio-option">
                    <input type="radio" name="type_client" value="particulier" checked>
                    <span class="radio-pill">Particulier</span>
                  </label>
                  <label class="radio-option">
                    <input type="radio" name="type_client" value="syndic-copropriete">
                    <span class="radio-pill">Syndic / Copropriété</span>
                  </label>
                  <label class="radio-option">
                    <input type="radio" name="type_client" value="entreprise">
                    <span class="radio-pill">Entreprise</span>
                  </label>
                </div>
              </div>

              <div class="form-group">
                <div class="floating-label-group">
                  <input
                    type="text"
                    id="contact-surface"
                    name="surface"
                    class="form-input"
                    placeholder=" "
                    inputmode="numeric"
                  >
                  <label class="floating-label" for="contact-surface">Surface approximative (optionnel)</label>
                  <div class="field-border"></div>
                  <div class="input-hint">En m² ou précisez l'unité</div>
                </div>
              </div>
            </div>

            <!-- Message détaillé -->
            <div class="form-section">
              <div class="form-group">
                <label class="textarea-label" for="contact-message">Décrivez votre situation</label>
                <div class="textarea-wrapper">
                  <textarea
                    id="contact-message"
                    name="message"
                    class="form-textarea"
                    rows="5"
                    placeholder="Décrivez votre projet, vos besoins spécifiques, les contraintes particulières..."
                  ></textarea>
                  <div class="field-border"></div>
                </div>
              </div>
            </div>

            <!-- Upload photos - RÉPARÉ avec le système qui fonctionne -->
            <div class="form-section">
              <div class="form-group">
                <label class="photos-label">Photos (optionnel)</label>
                
                <!-- Input caché -->
                <input type="file" id="photos-input" name="__photos_local" accept="image/*" multiple class="hidden" />
                
                <!-- Zone de drop cliquable -->
                <div id="photos-drop-zone" class="photos-drop-zone">
                  <div class="photos-drop-content">
                    <svg class="photos-icon" viewBox="0 0 24 24" fill="none" stroke="currentColor">
                      <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2"
                            d="M4 16l4.586-4.586a2 2 0 012.828 0L16 16m-2-2l1.586-1.586a2 2 0 012.828 0L20 14
                               m-6-6h.01M6 20h12a2 2 0 002-2V6a2 2 0 00-2-2H6a2 2 0 00-2 2v12a2 2 0 002 2z"/>
                    </svg>
                    <div>
                      <div class="photos-title">Ajoutez vos photos</div>
                      <div class="photos-help">Glissez-déposez ou cliquez • Max 5 photos • 8 MB par photo</div>
                    </div>
                  </div>
                </div>
                
                <!-- Statut des photos -->
                <div id="photos-status" class="photos-status">Aucune photo</div>
                
                <!-- Liste des photos -->
                <div id="photos-list" class="photos-list hidden"></div>
                
                <!-- Container pour les URLs Cloudinary -->
                <div id="photos-hidden"></div>
              </div>
            </div>

            <!-- RGPD -->
            <div class="form-section">
              <div class="checkbox-group">
                <div class="checkbox-wrapper">
                  <input type="checkbox" id="contact-rgpd" name="rgpd_consent" class="checkbox-input" required>
                  <label for="contact-rgpd" class="checkbox-label">
                    <div class="checkbox-box">
                      <svg class="checkbox-check" viewBox="0 0 24 24" fill="none" stroke="currentColor">
                        <path d="M9 12l2 2 4-4"/>
                      </svg>
                    </div>
                    <span class="checkbox-text">
                      J'accepte que mes données soient utilisées pour me recontacter dans le cadre de ma demande.
                      <a href="/politique-de-confidentialite" target="_blank" rel="noopener" class="privacy-link">En savoir plus</a>
                    </span>
                  </label>
                </div>
                <div class="form-error" id="error-rgpd"></div>
              </div>
            </div>

            <!-- Actions -->
            <div class="form-actions">
              <button type="submit" class="btn-primary" id="submitBtn">
                <span class="btn-content">
                  <span class="loading-spinner"></span>
                  <span id="submitText">Envoyer ma demande</span>
                </span>
              </button>
              <!-- Message de validation à côté du bouton -->
              <div id="validation-message" class="validation-message" style="display:none;"></div>

              <div class="action-divider">
                <span>ou</span>
              </div>

              <a href="tel:+33676738661" class="btn-call">
                <div class="call-content">
                  <div class="call-icon-wrapper">
                    <svg class="call-icon" viewBox="0 0 24 24" fill="none" stroke="currentColor">
                      <path d="M3 5a2 2 0 012-2h3.28a1 1 0 01.948.684l1.498 4.493a1 1 0 01-.502 1.21l-2.257 1.13a11.042 11.042 0 005.516 5.516l1.13-2.257a1 1 0 011.21-.502l4.493 1.498a1 1 0 01.684.949V19a2 2 0 01-2 2h-1C9.716 21 3 14.284 3 6V5z"/>
                    </svg>
                  </div>
                  <div class="call-text">
                    <span class="call-label">Appelez-nous directement</span>
                    <span class="call-number">06 76 73 86 61</span>
                  </div>
                </div>
              </a>
            </div>
          </form>
        </div>
      </div>

      <!-- Informations de contact -->
      <div class="contact-info">
        <div class="info-card">
          <h3 class="info-title">Nos coordonnées</h3>
          
          <div class="contact-item">
            <svg class="contact-icon" viewBox="0 0 24 24" fill="none" stroke="currentColor">
              <path d="M21 10c0 7-9 13-9 13s-9-6-9-13a9 9 0 0 1 18 0z"></path>
              <circle cx="12" cy="10" r="3"></circle>
            </svg>
            <div>
              <div class="contact-label">Adresse</div>
              <div class="contact-value">
                6 rue d'Armaillé<br>
                75017 Paris
              </div>
            </div>
          </div>

          <div class="contact-item">
            <svg class="contact-icon" viewBox="0 0 24 24" fill="none" stroke="currentColor">
              <path d="M3 5a2 2 0 012-2h3.28a1 1 0 01.948.684l1.498 4.493a1 1 0 01-.502 1.21l-2.257 1.13a11.042 11.042 0 005.516 5.516l1.13-2.257a1 1 0 011.21-.502l4.493 1.498a1 1 0 01.684.949V19a2 2 0 01-2 2h-1C9.716 21 3 14.284 3 6V5z"/>
            </svg>
            <div>
              <div class="contact-label">Téléphone</div>
              <div class="contact-value">
                <a href="tel:+33676738661">06 76 73 86 61</a>
              </div>
            </div>
          </div>

          <div class="contact-item">
            <svg class="contact-icon whatsapp-icon" viewBox="0 0 24 24" fill="currentColor">
              <path d="M17.472 14.382c-.297-.149-1.758-.867-2.03-.967-.273-.099-.471-.148-.67.15-.197.297-.767.966-.94 1.164-.173.199-.347.223-.644.075-.297-.15-1.255-.463-2.39-1.475-.883-.788-1.48-1.761-1.653-2.059-.173-.297-.018-.458.13-.606.134-.133.298-.347.446-.52.149-.174.198-.298.298-.497.099-.198.05-.371-.025-.52-.075-.149-.669-1.612-.916-2.207-.242-.579-.487-.5-.669-.51-.173-.008-.371-.01-.57-.01-.198 0-.52.074-.792.372-.272.297-1.04 1.016-1.04 2.479 0 1.462 1.065 2.875 1.213 3.074.149.198 2.096 3.2 5.077 4.487.709.306 1.262.489 1.694.625.712.227 1.36.195 1.871.118.571-.085 1.758-.719 2.006-1.413.248-.694.248-1.289.173-1.413-.074-.124-.272-.198-.57-.347m-5.421 7.403h-.004a9.87 9.87 0 01-5.031-1.378l-.361-.214-3.741.982.998-3.648-.235-.374a9.86 9.86 0 01-1.51-5.26c.001-5.45 4.436-9.884 9.888-9.884 2.64 0 5.122 1.03 6.988 2.898a9.825 9.825 0 012.893 6.994c-.003 5.45-4.437 9.884-9.885 9.884m8.413-18.297A11.815 11.815 0 0012.05 0C5.495 0 .16 5.335.157 11.892c0 2.096.547 4.142 1.588 5.945L.057 24l6.305-1.654a11.882 11.882 0 005.683 1.448h.005c6.554 0 11.89-5.335 11.893-11.893A11.821 11.821 0 0020.891 3.488"/>
            </svg>
            <div>
              <div class="contact-label">WhatsApp</div>
              <div class="contact-value">
                <a href="https://wa.me/33676738661" target="_blank" rel="noopener">06 76 73 86 61</a>
              </div>
            </div>
          </div>

          <div class="contact-item">
            <svg class="contact-icon" viewBox="0 0 24 24" fill="none" stroke="currentColor">
              <path d="M4 4h16c1.1 0 2 .9 2 2v12c0 1.1-.9 2-2 2H4c-1.1 0-2-.9-2-2V6c0-1.1.9-2 2-2z"></path>
              <polyline points="22,6 12,13 2,6"></polyline>
            </svg>
            <div>
              <div class="contact-label">Email</div>
              <div class="contact-value">
                <a href="mailto:contact@klinova.fr">contact@klinova.fr</a>
              </div>
            </div>
          </div>

          <div class="contact-item">
            <svg class="contact-icon" viewBox="0 0 24 24" fill="none" stroke="currentColor">
              <circle cx="12" cy="12" r="10"></circle>
              <polyline points="12,6 12,12 16,14"></polyline>
            </svg>
            <div>
              <div class="contact-label">Horaires</div>
              <div class="contact-value">
                Lun - Ven : 8h - 18h<br>
                Sam : 9h - 17h
              </div>
            </div>
          </div>
        </div>

        <div class="info-card zone-card">
          <h3 class="info-title">Zone d'intervention</h3>
          <p class="zone-text">
            Nous intervenons principalement en Île-de-France et nous déplaçons selon vos besoins dans toute la France pour les projets importants.
          </p>
        </div>
      </div>
    </div>
  </div>
</section>

<style>
/* Variables Klinova */
.contact-section {
  --klinova-green: #3F8D65;
  --klinova-green-dark: #387B58;
  --klinova-text-title: #1E2939;
  --klinova-text-secondary: #475569;
  --klinova-bg-main: #FCFCFC;
  --klinova-separator: #E5E7EB;
  --klinova-bg-exterieur: #DFF1E8;
  --border-radius: 16px;
  --transition: all 0.3s cubic-bezier(0.4, 0, 0.2, 1);
}

.contact-section {
  background: var(--klinova-bg-main);
  padding: 60px 0 80px;
  min-height: 100vh;
}

/* Header */
.contact-header {
  text-align: center;
  margin-bottom: 60px;
}

.contact-title {
  font-size: 42px;
  font-weight: 700;
  color: var(--klinova-text-title);
  margin-bottom: 16px;
  letter-spacing: -0.02em;
}

.contact-subtitle {
  font-size: 20px;
  color: var(--klinova-text-secondary);
  margin-bottom: 32px;
  max-width: 600px;
  margin-left: auto;
  margin-right: auto;
  line-height: 1.5;
}

.contact-badges {
  display: flex;
  justify-content: center;
  gap: 40px;
  flex-wrap: wrap;
}

.badge-item {
  display: flex;
  align-items: center;
  gap: 10px;
  color: var(--klinova-green);
  font-weight: 600;
  font-size: 15px;
}

.badge-icon {
  width: 20px;
  height: 20px;
  stroke-width: 2.5;
}

/* Layout */
.contact-grid {
  display: grid;
  grid-template-columns: 2fr 1fr;
  gap: 60px;
  align-items: start;
}

/* Formulaire */
.form-container {
  width: 100%;
}

.form-card {
  background: #FFFFFF;
  border: 1px solid var(--klinova-separator);
  border-radius: var(--border-radius);
  padding: 40px;
  box-shadow: 0 4px 20px rgba(63, 141, 101, 0.08);
}

.form-section {
  margin-bottom: 40px;
}

.form-section:last-of-type {
  margin-bottom: 0;
}

.section-title {
  font-size: 18px;
  font-weight: 600;
  color: var(--klinova-text-title);
  margin-bottom: 24px;
  padding-bottom: 12px;
  border-bottom: 2px solid var(--klinova-bg-exterieur);
}

/* Champs de formulaire */
.form-row {
  display: grid;
  grid-template-columns: 1fr 1fr;
  gap: 20px;
  margin-bottom: 20px;
}

.form-group {
  position: relative;
}

.floating-label-group {
  position: relative;
}

.form-input {
  width: 100%;
  padding: 16px 14px 8px;
  border: 2px solid var(--klinova-separator);
  border-radius: var(--border-radius);
  font-size: 16px;
  background: #FFFFFF;
  transition: var(--transition);
  color: var(--klinova-text-secondary);
  min-height: 56px;
}

.form-input:focus {
  outline: none;
  border-color: var(--klinova-green);
  box-shadow: 0 0 0 4px rgba(63, 141, 101, 0.15);
}

.form-input.error {
  border-color: #ef4444;
}

.floating-label {
  position: absolute;
  left: 14px;
  top: 16px;
  font-size: 16px;
  color: #6b7280;
  transition: var(--transition);
  pointer-events: none;
  font-weight: 500;
}

.floating-label.required::after {
  content: ' *';
  color: #ef4444;
}

.form-input:focus + .floating-label,
.form-input:not(:placeholder-shown) + .floating-label {
  transform: translateY(-20px) scale(0.85);
  color: var(--klinova-green);
  font-weight: 600;
}

.field-border {
  position: absolute;
  bottom: 0;
  left: 0;
  right: 0;
  height: 2px;
  background: var(--klinova-green);
  transform: scaleX(0);
  transition: var(--transition);
}

.form-input:focus ~ .field-border {
  transform: scaleX(1);
}

.input-hint {
  position: absolute;
  right: 14px;
  bottom: 8px;
  font-size: 12px;
  color: #6b7280;
  opacity: 0;
  transition: var(--transition);
}

.form-input:focus ~ .input-hint {
  opacity: 1;
}

/* Messages d'erreur */
.form-error {
  font-size: 13px;
  color: #ef4444;
  margin-top: 6px;
  min-height: 18px;
  display: none;
}

.form-error:not(:empty) {
  display: block;
}

/* Select */
.select-label {
  display: block;
  font-weight: 600;
  color: var(--klinova-text-title);
  margin-bottom: 12px;
  font-size: 15px;
}

.form-group + .form-group .select-label {
  margin-top: 24px;
}

.select-wrapper {
  position: relative;
}

.form-select {
  width: 100%;
  padding: 16px 40px 16px 14px;
  border: 2px solid var(--klinova-separator);
  border-radius: var(--border-radius);
  font-size: 16px;
  background: #FFFFFF;
  transition: var(--transition);
  color: var(--klinova-text-secondary);
  min-height: 56px;
  appearance: none;
  cursor: pointer;
}

.form-select:focus {
  outline: none;
  border-color: var(--klinova-green);
  box-shadow: 0 0 0 4px rgba(63, 141, 101, 0.15);
}

.select-icon {
  position: absolute;
  right: 14px;
  top: 50%;
  transform: translateY(-50%);
  width: 20px;
  height: 20px;
  color: #6b7280;
  pointer-events: none;
}

/* Radio buttons */
.radio-group {
  display: flex;
  gap: 16px;
  flex-wrap: wrap;
  margin-bottom: 20px;
}

.radio-option {
  display: flex;
  align-items: center;
  cursor: pointer;
}

.radio-option input[type="radio"] {
  display: none;
}

.radio-pill {
  padding: 12px 20px;
  border: 2px solid var(--klinova-separator);
  border-radius: 999px;
  background: #FFFFFF;
  transition: var(--transition);
  font-weight: 500;
  color: var(--klinova-text-secondary);
  white-space: nowrap;
}

.radio-option input[type="radio"]:checked + .radio-pill {
  border-color: var(--klinova-green);
  background: var(--klinova-bg-exterieur);
  color: var(--klinova-text-title);
  font-weight: 600;
}

.radio-pill:hover {
  border-color: var(--klinova-green);
}

/* Textarea */
.textarea-label {
  display: block;
  font-weight: 600;
  color: var(--klinova-text-title);
  margin-bottom: 12px;
  font-size: 15px;
}

.textarea-wrapper {
  position: relative;
}

.form-textarea {
  width: 100%;
  padding: 16px 14px;
  border: 2px solid var(--klinova-separator);
  border-radius: var(--border-radius);
  font-size: 16px;
  background: #FFFFFF;
  transition: var(--transition);
  color: var(--klinova-text-secondary);
  resize: vertical;
  min-height: 120px;
  font-family: inherit;
}

.form-textarea:focus {
  outline: none;
  border-color: var(--klinova-green);
  box-shadow: 0 0 0 4px rgba(63, 141, 101, 0.15);
}

.form-textarea:focus ~ .field-border {
  transform: scaleX(1);
}

/* PHOTOS - Style optimisé avec le système qui fonctionne */
.photos-label {
  display: block;
  font-weight: 600;
  color: var(--klinova-text-title);
  margin-bottom: 12px;
  font-size: 15px;
}

.photos-drop-zone {
  display: flex;
  align-items: center;
  gap: 16px;
  padding: 20px;
  border: 2px dashed var(--klinova-separator);
  border-radius: var(--border-radius);
  cursor: pointer;
  background: #FFFFFF;
  transition: var(--transition);
  min-height: 80px;
}

.photos-drop-zone:hover,
.photos-drop-zone.dragover {
  border-color: var(--klinova-green);
  background: var(--klinova-bg-exterieur);
}

.photos-drop-content {
  display: flex;
  align-items: center;
  gap: 16px;
  width: 100%;
  pointer-events: none;
}

.photos-icon {
  width: 32px;
  height: 32px;
  color: var(--klinova-green);
  flex-shrink: 0;
}

.photos-title {
  font-weight: 600;
  color: var(--klinova-text-title);
  font-size: 16px;
  margin-bottom: 4px;
}

.photos-help {
  font-size: 14px;
  color: var(--klinova-text-secondary);
  line-height: 1.4;
}

.photos-status {
  margin-top: 12px;
  font-size: 14px;
  color: var(--klinova-text-secondary);
  font-weight: 500;
}

.photos-list {
  margin-top: 16px;
  display: grid;
  gap: 12px;
  max-height: 200px;
  overflow-y: auto;
}

.photo-item {
  display: flex;
  align-items: center;
  justify-content: space-between;
  padding: 8px 12px;
  background: #F8FAFC;
  border: 1px solid var(--klinova-separator);
  border-radius: 8px;
  font-size: 13px;
}

.photo-name {
  font-weight: 500;
  color: var(--klinova-text-title);
  flex: 1;
  margin-right: 8px;
  overflow: hidden;
  text-overflow: ellipsis;
  white-space: nowrap;
}

.photo-size {
  color: var(--klinova-text-secondary);
  margin-right: 8px;
}

.photo-status {
  font-weight: 500;
  margin-right: 8px;
  min-width: 60px;
  text-align: center;
}

.photo-status.uploading { color: #3B82F6; }
.photo-status.success { color: #10B981; }
.photo-status.error { color: #EF4444; }

.photo-remove {
  background: #EF4444;
  color: white;
  border: none;
  width: 22px;
  height: 22px;
  border-radius: 50%;
  cursor: pointer;
  font-size: 14px;
  line-height: 1;
  display: flex;
  align-items: center;
  justify-content: center;
}

.photo-progress {
  grid-column: 1 / -1;
  height: 3px;
  background: var(--klinova-separator);
  border-radius: 999px;
  overflow: hidden;
  margin-top: 4px;
}

.photo-progress-fill {
  height: 100%;
  background: var(--klinova-green);
  width: 0%;
  transition: width 0.3s ease;
}

.hidden {
  display: none !important;
}

/* Checkbox */
.checkbox-group {
  margin: 32px 0;
}

.checkbox-wrapper {
  display: flex;
  align-items: flex-start;
  gap: 16px;
}

.checkbox-input {
  display: none;
}

.checkbox-label {
  display: flex;
  align-items: flex-start;
  gap: 12px;
  cursor: pointer;
  font-size: 15px;
  line-height: 1.5;
  color: var(--klinova-text-secondary);
}

.checkbox-box {
  width: 20px;
  height: 20px;
  border: 2px solid var(--klinova-separator);
  border-radius: 6px;
  background: #FFFFFF;
  display: flex;
  align-items: center;
  justify-content: center;
  transition: var(--transition);
  flex-shrink: 0;
  margin-top: 2px;
}

.checkbox-check {
  width: 12px;
  height: 12px;
  stroke-width: 3;
  color: white;
  opacity: 0;
  transform: scale(0);
  transition: var(--transition);
}

.checkbox-input:checked + .checkbox-label .checkbox-box {
  background: var(--klinova-green);
  border-color: var(--klinova-green);
}

.checkbox-input:checked + .checkbox-label .checkbox-check {
  opacity: 1;
  transform: scale(1);
}

.privacy-link {
  color: var(--klinova-green);
  text-decoration: none;
  font-weight: 500;
}

.privacy-link:hover {
  text-decoration: underline;
}

/* Messages */
.form-message {
  padding: 20px 24px;
  border-radius: var(--border-radius);
  margin-bottom: 32px;
  font-weight: 500;
  text-align: center;
  font-size: 15px;
  line-height: 1.4;
}

.form-message.success {
  background: rgba(236, 253, 245, 0.9);
  color: #047857;
  border: 1px solid rgba(16, 185, 129, 0.3);
}

.form-message.error {
  background: rgba(254, 242, 242, 0.9);
  color: #dc2626;
  border: 1px solid rgba(239, 68, 68, 0.3);
}

/* Message de validation à côté du bouton */
.validation-message {
  background: #fef2f2;
  color: #dc2626;
  padding: 12px 16px;
  border-radius: 8px;
  font-size: 14px;
  font-weight: 500;
  border: 1px solid #fecaca;
  margin-top: 8px;
}

/* Actions */
.form-actions {
  display: flex;
  flex-direction: column;
  gap: 24px;
  align-items: center;
  margin-top: 40px;
}

.btn-primary {
  width: 100%;
  max-width: 300px;
  background: var(--klinova-green);
  color: white;
  border: none;
  padding: 18px 32px;
  border-radius: var(--border-radius);
  font-weight: 600;
  font-size: 16px;
  cursor: pointer;
  transition: var(--transition);
  min-height: 56px;
  display: flex;
  align-items: center;
  justify-content: center;
}

.btn-primary:hover {
  background: var(--klinova-green-dark);
  transform: translateY(-2px);
  box-shadow: 0 8px 25px rgba(63, 141, 101, 0.25);
}

.btn-content {
  display: flex;
  align-items: center;
  gap: 8px;
}

.loading-spinner {
  width: 20px;
  height: 20px;
  border: 2px solid rgba(255, 255, 255, 0.3);
  border-top: 2px solid white;
  border-radius: 50%;
  animation: spin 1s linear infinite;
  display: none;
}

.btn-primary.loading .loading-spinner {
  display: block;
}

.btn-primary.loading #submitText {
  opacity: 0.7;
}

@keyframes spin {
  0% { transform: rotate(0deg); }
  100% { transform: rotate(360deg); }
}

.action-divider {
  display: flex;
  align-items: center;
  gap: 20px;
  color: var(--klinova-text-secondary);
  font-weight: 500;
  width: 100%;
}

.action-divider::before,
.action-divider::after {
  content: '';
  flex: 1;
  height: 1px;
  background: var(--klinova-separator);
}

.btn-call {
  display: flex;
  align-items: center;
  justify-content: center;
  padding: 16px 24px;
  background: white;
  border: 2px solid var(--klinova-green-dark);
  border-radius: var(--border-radius);
  text-decoration: none;
  transition: var(--transition);
  min-height: 56px;
  width: 100%;
  max-width: 300px;
}

.btn-call:hover {
  background: var(--klinova-bg-exterieur);
  border-color: var(--klinova-green);
  transform: translateY(-2px);
}

.call-content {
  display: flex;
  align-items: center;
  gap: 12px;
}

.call-icon-wrapper {
  width: 32px;
  height: 32px;
  background: rgba(63, 141, 101, 0.1);
  border-radius: 50%;
  display: flex;
  align-items: center;
  justify-content: center;
}

.call-icon {
  width: 18px;
  height: 18px;
  color: var(--klinova-green);
  stroke-width: 2.5;
}

.call-text {
  display: flex;
  flex-direction: column;
  text-align: left;
}

.call-label {
  font-size: 13px;
  color: var(--klinova-text-secondary);
  font-weight: 500;
}

.call-number {
  font-size: 16px;
  color: var(--klinova-text-title);
  font-weight: 600;
}

/* Informations de contact */
.contact-info {
  display: flex;
  flex-direction: column;
  gap: 32px;
}

.info-card {
  background: #FFFFFF;
  border: 1px solid var(--klinova-separator);
  border-radius: var(--border-radius);
  padding: 32px;
  box-shadow: 0 4px 20px rgba(63, 141, 101, 0.08);
}

.zone-card {
  background: var(--klinova-bg-exterieur);
  border-color: rgba(63, 141, 101, 0.2);
}

.info-title {
  font-size: 20px;
  font-weight: 600;
  color: var(--klinova-text-title);
  margin-bottom: 24px;
}

.contact-item {
  display: flex;
  align-items: flex-start;
  gap: 16px;
  margin-bottom: 24px;
}

.contact-item:last-child {
  margin-bottom: 0;
}

.contact-icon {
  width: 24px;
  height: 24px;
  color: var(--klinova-green);
  stroke-width: 2;
  flex-shrink: 0;
  margin-top: 2px;
}

.whatsapp-icon {
  color: #25D366 !important;
}

.contact-label {
  font-weight: 600;
  color: var(--klinova-text-title);
  margin-bottom: 4px;
  font-size: 14px;
}

.contact-value {
  color: var(--klinova-text-secondary);
  line-height: 1.5;
}

.contact-value a {
  color: var(--klinova-green);
  text-decoration: none;
  font-weight: 500;
}

.contact-value a:hover {
  text-decoration: underline;
}

.zone-text {
  color: var(--klinova-text-secondary);
  line-height: 1.6;
  margin: 0;
}

/* Responsive */
@media (max-width: 1024px) {
  .contact-grid {
    grid-template-columns: 1fr;
    gap: 40px;
  }
  
  .contact-info {
    order: -1;
  }
  
  .info-card {
    padding: 24px;
  }
}

@media (max-width: 768px) {
  .contact-section {
    padding: 40px 0 60px;
  }
  
  .contact-title {
    font-size: 32px;
  }
  
  .contact-subtitle {
    font-size: 18px;
  }
  
  .contact-badges {
    gap: 20px;
    flex-direction: column;
    align-items: center;
  }
  
  .form-card {
    padding: 24px;
  }
  
  .form-row {
    grid-template-columns: 1fr;
    gap: 16px;
  }
  
  .radio-group {
    flex-direction: column;
    gap: 12px;
  }
  
  .radio-pill {
    text-align: center;
  }
  
  .form-actions {
    gap: 16px;
  }
  
  .btn-primary,
  .btn-call {
    max-width: none;
  }
}

@media (max-width: 480px) {
  .contact-header {
    margin-bottom: 40px;
  }
  
  .contact-title {
    font-size: 28px;
  }
  
  .contact-subtitle {
    font-size: 16px;
  }
  
  .form-card {
    padding: 20px;
  }
  
  .section-title {
    font-size: 16px;
  }
  
  .contact-info {
    gap: 24px;
  }
  
  .info-card {
    padding: 20px;
  }
}
</style>

<script is:inline>
(() => {
  const contactForm = document.getElementById('contactForm');
  const msg = document.getElementById('formMessage');
  const submitBtn = document.getElementById('submitBtn');
  const submitText = document.getElementById('submitText');
  const validationMessage = document.getElementById('validation-message');

  if (!contactForm) return;

  // ✅ PHOTOS UPLOAD - Système du formulaire moquettes qui fonctionne
  const photosSetup = () => {
    const photosInput = document.getElementById('photos-input');
    const dropZone = document.getElementById('photos-drop-zone');
    const photosList = document.getElementById('photos-list');
    const photosStatus = document.getElementById('photos-status');
    const photosHidden = document.getElementById('photos-hidden');
    
    if (!photosInput || !dropZone) return;

    let uploadingCount = 0;
    let uploadedFiles = [];
    const maxFiles = 5;
    const maxMB = 8;

    function updatePhotosStatus() {
      const total = uploadedFiles.length;
      const success = uploadedFiles.filter(f => f.status === 'success').length;
      const uploading = uploadingCount;
      
      if (total === 0) {
        photosStatus.textContent = 'Aucune photo';
        photosList.classList.add('hidden');
      } else {
        photosStatus.textContent = `${total}/${maxFiles} photos • ${success} importée${success > 1 ? 's' : ''}${uploading > 0 ? ` • ${uploading} en cours...` : ''}`;
        photosList.classList.remove('hidden');
      }
      
      submitBtn.disabled = uploadingCount > 0;
    }

    function addPhotoToList(file) {
      const photoDiv = document.createElement('div');
      photoDiv.className = 'photo-item';
      photoDiv.dataset.fileName = file.name;
      
      photoDiv.innerHTML = `
        <span class="photo-name">${file.name}</span>
        <span class="photo-size">${(file.size / 1024 / 1024).toFixed(1)} MB</span>
        <span class="photo-status uploading">Upload...</span>
        <button type="button" class="photo-remove" aria-label="Supprimer">×</button>
        <div class="photo-progress">
          <div class="photo-progress-fill"></div>
        </div>
      `;
      
      photoDiv.querySelector('.photo-remove').addEventListener('click', () => {
        removePhoto(file.name);
      });
      
      photosList.appendChild(photoDiv);
    }

    function updatePhotoStatus(fileName, status, progress = 0) {
      const photoDiv = photosList.querySelector(`[data-file-name="${fileName}"]`);
      if (!photoDiv) return;
      
      const statusEl = photoDiv.querySelector('.photo-status');
      const progressFill = photoDiv.querySelector('.photo-progress-fill');
      
      statusEl.className = `photo-status ${status}`;
      
      switch (status) {
        case 'uploading':
          statusEl.textContent = `${progress}%`;
          progressFill.style.width = `${progress}%`;
          break;
        case 'success':
          statusEl.textContent = 'Importée ✓';
          progressFill.style.width = '100%';
          break;
        case 'error':
          statusEl.textContent = 'Erreur ⚠';
          progressFill.style.width = '0%';
          break;
      }
    }

    function removePhoto(fileName) {
      const fileIndex = uploadedFiles.findIndex(f => f.name === fileName);
      if (fileIndex !== -1) {
        const file = uploadedFiles[fileIndex];
        if (file.cloudinaryUrl) {
          const hiddenInput = photosHidden.querySelector(`input[value="${file.cloudinaryUrl}"]`);
          if (hiddenInput) hiddenInput.remove();
        }
        uploadedFiles.splice(fileIndex, 1);
      }
      
      const photoDiv = photosList.querySelector(`[data-file-name="${fileName}"]`);
      if (photoDiv) photoDiv.remove();
      
      updatePhotosStatus();
    }

    async function getCloudinarySignature() {
      const response = await fetch('/api/cloudinary-signature', {
        method: 'POST',
        headers: { 'Content-Type': 'application/json' },
        body: JSON.stringify({})
      });
      
      const data = await response.json();
      if (!data.ok) {
        throw new Error(data.error || 'Erreur signature Cloudinary');
      }
      
      return data;
    }

    async function uploadToCloudinary(file) {
      const fileObj = {
        name: file.name,
        size: file.size,
        status: 'uploading',
        progress: 0,
        cloudinaryUrl: null
      };
      
      uploadedFiles.push(fileObj);
      addPhotoToList(file);
      uploadingCount++;
      updatePhotosStatus();
      
      try {
        const signature = await getCloudinarySignature();
        
        const formData = new FormData();
        formData.append('file', file);
        formData.append('api_key', signature.apiKey);
        formData.append('timestamp', String(signature.timestamp));
        formData.append('signature', signature.signature);
        formData.append('folder', signature.folder);
        if (signature.uploadPreset) {
          formData.append('upload_preset', signature.uploadPreset);
        }

        const uploadUrl = `https://api.cloudinary.com/v1_1/${signature.cloudName}/auto/upload`;
        
        const xhr = new XMLHttpRequest();
        
        xhr.upload.onprogress = (e) => {
          if (e.lengthComputable) {
            const progress = Math.round((e.loaded / e.total) * 100);
            fileObj.progress = progress;
            updatePhotoStatus(file.name, 'uploading', progress);
          }
        };
        
        xhr.onload = () => {
          uploadingCount--;
          try {
            const result = JSON.parse(xhr.responseText);
            if (xhr.status >= 200 && xhr.status < 300 && result.secure_url) {
              fileObj.status = 'success';
              fileObj.cloudinaryUrl = result.secure_url;
              updatePhotoStatus(file.name, 'success');
              
              const hiddenInput = document.createElement('input');
              hiddenInput.type = 'hidden';
              hiddenInput.name = 'photos[]';
              hiddenInput.value = result.secure_url;
              photosHidden.appendChild(hiddenInput);
            } else {
              throw new Error('Upload failed');
            }
          } catch (err) {
            fileObj.status = 'error';
            updatePhotoStatus(file.name, 'error');
            console.error('Upload error:', err);
          }
          updatePhotosStatus();
        };
        
        xhr.onerror = () => {
          uploadingCount--;
          fileObj.status = 'error';
          updatePhotoStatus(file.name, 'error');
          updatePhotosStatus();
          console.error('Upload network error');
        };
        
        xhr.open('POST', uploadUrl);
        xhr.send(formData);
        
      } catch (error) {
        uploadingCount--;
        fileObj.status = 'error';
        updatePhotoStatus(file.name, 'error');
        updatePhotosStatus();
        console.error('Cloudinary error:', error);
      }
    }

    function validateFiles(files) {
      const validFiles = [];
      
      for (const file of files) {
        if (!file.type.startsWith('image/')) {
          alert(`${file.name} n'est pas une image valide`);
          continue;
        }
        
        if (file.size > maxMB * 1024 * 1024) {
          alert(`${file.name} dépasse la limite de ${maxMB} MB`);
          continue;
        }
        
        if (uploadedFiles.length + validFiles.length >= maxFiles) {
          alert(`Maximum ${maxFiles} photos autorisées`);
          break;
        }
        
        validFiles.push(file);
      }
      
      return validFiles;
    }

    function handleFiles(files) {
      const validFiles = validateFiles(Array.from(files));
      validFiles.forEach(file => uploadToCloudinary(file));
    }

    // Event listeners pour les photos
    photosInput.addEventListener('change', (e) => {
      if (e.target.files.length > 0) {
        handleFiles(e.target.files);
        e.target.value = '';
      }
    });

    dropZone.addEventListener('click', () => photosInput.click());

    // Drag & Drop
    ['dragenter', 'dragover', 'dragleave', 'drop'].forEach(eventName => {
      dropZone.addEventListener(eventName, (e) => {
        e.preventDefault();
        e.stopPropagation();
      });
    });

    ['dragenter', 'dragover'].forEach(eventName => {
      dropZone.addEventListener(eventName, () => {
        dropZone.classList.add('dragover');
      });
    });

    ['dragleave', 'drop'].forEach(eventName => {
      dropZone.addEventListener(eventName, () => {
        dropZone.classList.remove('dragover');
      });
    });

    dropZone.addEventListener('drop', (e) => {
      const files = e.dataTransfer.files;
      if (files.length > 0) {
        handleFiles(files);
      }
    });

    updatePhotosStatus();
    
    window.resetPhotosUpload = function() {
      uploadedFiles = [];
      photosInput.value = '';
      photosList.innerHTML = '';
      updatePhotosStatus();
    };
  };

  // ✅ VALIDATION AMÉLIORÉE
  function validateField(field) {
    const value = field.value.trim();
    const errorId = 'error-' + field.name.replace('_', '-');
    const errorDiv = document.getElementById(errorId);
    
    if (field.required && !value) {
      field.classList.add('error');
      if (errorDiv) {
        errorDiv.textContent = 'Ce champ est requis';
        errorDiv.style.display = 'block';
      }
      return false;
    }
    
    if (field.type === 'email' && value && !/^[^\s@]+@[^\s@]+\.[^\s@]+$/.test(value)) {
      field.classList.add('error');
      if (errorDiv) {
        errorDiv.textContent = 'Format email invalide';
        errorDiv.style.display = 'block';
      }
      return false;
    }
    
    field.classList.remove('error');
    if (errorDiv) {
      errorDiv.textContent = '';
      errorDiv.style.display = 'none';
    }
    return true;
  }

  function showValidationMessage(text) {
    if (!validationMessage) return;
    validationMessage.textContent = text;
    validationMessage.style.display = text ? 'block' : 'none';
  }

  // Form submission
  contactForm.addEventListener('submit', async (e) => {
    e.preventDefault();

    showValidationMessage('');
    
    // Validation des champs obligatoires
    const requiredFields = contactForm.querySelectorAll('[required]');
    let isValid = true;
    let firstErrorField = null;
    
    requiredFields.forEach(field => {
      if (!validateField(field)) {
        isValid = false;
        if (!firstErrorField) {
          firstErrorField = field;
        }
      }
    });
    
    // Validation email si rempli
    const emailField = contactForm.querySelector('[name="email"]');
    if (emailField && emailField.value.trim()) {
      if (!validateField(emailField)) {
        isValid = false;
        if (!firstErrorField) {
          firstErrorField = emailField;
        }
      }
    }
    
    if (!isValid) {
      showValidationMessage('⚠️ Veuillez remplir tous les champs obligatoires');
      if (firstErrorField) {
        firstErrorField.scrollIntoView({ behavior: 'smooth', block: 'center' });
        firstErrorField.focus();
      }
      return;
    }

    setLoading(true);
    showMessage('', 'clear');
    
    try {
      const formData = new FormData(contactForm);
      const response = await fetch('/api/contact', {
        method: 'POST',
        body: formData,
        headers: { 'Accept': 'application/json' }
      });

      let data = null;
      try { data = await response.json(); } catch {}

      if (response.ok) {
        showMessage('✅ Merci ! Votre demande a été envoyée.\nNous vous recontactons rapidement.', 'success');
        contactForm.reset();
        
        if (window.resetPhotosUpload) {
          window.resetPhotosUpload();
        }
      } else {
        const err = data?.error || data?.message || 'Une erreur est survenue. Merci de réessayer.';
        showMessage(err, 'error');
      }
    } catch (err) {
      console.error('Erreur envoi formulaire:', err);
      showMessage('Impossible de contacter le serveur. Merci de réessayer dans un instant.', 'error');
    } finally {
      setLoading(false);
    }
  });

  function setLoading(state) {
    if (!submitBtn) return;
    submitBtn.classList.toggle('loading', !!state);
    submitBtn.disabled = !!state;
  }
  
  function showMessage(text, type) {
    if (!msg) return;
    if (type === 'clear') {
      msg.textContent = ''; 
      msg.style.display = 'none';
      msg.className = 'form-message';
      return;
    }
    msg.textContent = text || '';
    msg.style.display = text ? 'block' : 'none';
    msg.className = `form-message ${type === 'success' ? 'success' : 'error'}`;
    
    if (text) {
      msg.scrollIntoView({ behavior: 'smooth', block: 'center' });
    }
  }

  // Validation en temps réel
  contactForm.addEventListener('blur', (e) => {
    if (e.target.matches('input, select, textarea')) {
      validateField(e.target);
    }
  }, true);

  // ✅ INITIALISATION
  photosSetup();
})();
</script>
</Layout>
