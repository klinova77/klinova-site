---
// src/layouts/SiteFrameKlinova.astro
import Header from "../components/Header.astro";
import Footer from "../components/Footer.astro";
import PopupForm from "../components/PopupForm.astro";

type PopupCtxNew = {
  serviceKey?: string;
  serviceLabel?: string;
  trackingSource?: string;
  presetSubject?: string | null;
  title?: string | null;      // nouveau nom
  subtitle?: string | null;   // nouveau nom
  creditImpotEnabled?: boolean;

  // ✅ Ajouts pour l’upload
  showFileUpload?: boolean;
  maxFiles?: number;
};

type PopupCtxLegacy = {
  popupTitle?: string | null;     // compat
  popupSubtitle?: string | null;  // compat
};

// Props acceptent les deux (nouveau + legacy)
type PopupCtx = PopupCtxNew & PopupCtxLegacy;

interface Props {
  popupContext?: PopupCtx;
  seo?: { title?: string; description?: string; lang?: string };
}

const { popupContext, seo } = Astro.props as Props;

// Defaults centralisés (incluent l’upload)
const DEFAULTS: Required<Pick<
  PopupCtxNew,
  'serviceKey' | 'serviceLabel' | 'trackingSource' | 'creditImpotEnabled' | 'showFileUpload' | 'maxFiles'
>> & {
  presetSubject: string | null;
  title: string | null;
  subtitle: string | null;
} = {
  serviceKey: 'general',
  serviceLabel: 'Service Klinova',
  trackingSource: 'popup-general',
  presetSubject: null,
  title: 'Devis express Klinova',
  subtitle: 'Réponse sous 24h',
  creditImpotEnabled: false,

  // ✅ Valeurs par défaut pour l’upload
  showFileUpload: true,
  maxFiles: 5,
};

// Normalisation du contexte + compat legacy
function normalize(ctx?: PopupCtx) {
  const merged = { ...DEFAULTS, ...(ctx || {}) };
  const title = merged.title ?? merged.popupTitle ?? DEFAULTS.title;
  const subtitle = merged.subtitle ?? merged.popupSubtitle ?? DEFAULTS.subtitle;

  return {
    serviceKey: merged.serviceKey,
    serviceLabel: merged.serviceLabel,
    trackingSource: merged.trackingSource,
    presetSubject: merged.presetSubject ?? null,
    title,
    subtitle,
    creditImpotEnabled: !!merged.creditImpotEnabled,

    // ✅ on remonte bien ces deux propriétés au composant
    showFileUpload: merged.showFileUpload,
    maxFiles: merged.maxFiles,
  };
}

const ctx = normalize(popupContext);
---

<!-- Preload font -->
<Fragment slot="head">
  <link rel="preload" href="/fonts/CaviarDreams-Bold.woff2" as="font" type="font/woff2" crossorigin />
</Fragment>

<!-- (Optionnel) data-* pour analytics -->
<script is:inline define:vars={{ ctx }}>
  document.body.dataset.serviceKey = ctx.serviceKey;
  document.body.dataset.serviceLabel = ctx.serviceLabel;
  document.body.dataset.trackingSource = ctx.trackingSource;
  document.body.dataset.presetSubject = ctx.presetSubject || '';
  document.body.dataset.popupTitle = ctx.title || '';
  document.body.dataset.popupSubtitle = ctx.subtitle || '';
  document.body.dataset.creditImpot = ctx.creditImpotEnabled ? '1' : '0';
</script>

<Header />

<main class="min-h-[60vh]">
  <slot />
</main>

<Footer />

<!-- ✅ Passage du contexte complet (incluant showFileUpload/maxFiles) -->
<PopupForm client:idle context={ctx} />


<!-- Analytics événementiels -->
<script is:inline>
  (function () {
    window.dataLayer = window.dataLayer || [];

    window.addEventListener('sp:popup_open', (e) => {
      const type = (e && e.detail && e.detail.type) || 'unknown';
      const b = document.body?.dataset || {};
      window.dataLayer.push({
        event: 'popup_open',
        popup_type: type,
        page_type: 'site',
        service_key: b.serviceKey,
        service_label: b.serviceLabel
      });
      if (typeof window.gtag === 'function') {
        window.gtag('event', 'popup_open', {
          event_category: 'engagement',
          event_label: type
        });
      }
    });

    window.addEventListener('sp:popup_close', () => {
      const b = document.body?.dataset || {};
      window.dataLayer.push({
        event: 'popup_close',
        page_type: 'site',
        service_key: b.serviceKey,
        service_label: b.serviceLabel
      });
    });

    if ('scrollRestoration' in window.history) {
      window.history.scrollRestoration = 'manual';
    }
    if (!sessionStorage.getItem('_scroll_reset_done')) {
      window.addEventListener('load', () => {
        window.scrollTo(0, 0);
        sessionStorage.setItem('_scroll_reset_done', '1');
      }, { once: true });
    }
  })();
</script>
