---
import { mainNav as _mainNav } from '~/lib/nav.ts';
import CtaDevis from '~/components/UI/CtaDevis.astro';
import CtaPhone from '~/components/UI/CtaPhone.astro';
import { LINKS, PHONE_DISPLAY, linkAttrs } from '~/lib/links';

import Button from '~/components/UI/Button.astro';

const items = Array.isArray(_mainNav) ? _mainNav : [];

const current = Astro.url.pathname.replace(/\/+$/, '');
const isActive = (href: string) =>
  current === href || (href !== '/' && current.startsWith(href));

// routes où les CTA doivent être cachés d'emblée
const hideCTAInit = ['/contact'].includes(current);


---

<!-- ===== Barre du haut STICKY (logo + CTA desktop + burger mobile) ===== -->
<div id="topBar" class="sticky top-0 z-[60] bg-white/90 backdrop-blur border-b border-neutral-200">
  <div class="container-responsive py-3 lg:py-4">
    <div class="flex items-center justify-between gap-4">
      <!-- Logo -->
      <a href="/" class="flex items-center space-x-3 shrink-0" aria-label="Stop-Punaises - Accueil">
        <div class="w-10 h-10 bg-gradient-to-br from-primary-500 to-primary-600 rounded-lg flex items-center justify-center shadow-soft">
          <span class="text-white font-bold text-lg leading-none">SP</span>
        </div>
        <div class="leading-tight">
          <span class="block text-xl font-semibold text-primary-600">Stop Punaises</span>
          <span class="block text-xs text-neutral-500 uppercase tracking-wide">Expert Paris &amp; IDF</span>
        </div>
      </a>

      <!-- CTA desktop (≥ lg) -->
      <div 
        id="header-cta-buttons" 
        class="hidden lg:flex items-center gap-3 shrink-0"
        data-hidden={hideCTAInit ? 'true' : 'false'}
      >
        <Button
  href="tel:+33630221228"
  ariaLabel="Appeler Stop-Punaises au 06 30 22 12 28"
  variant="primary"
  size="md"
  class="flex items-center gap-2 px-6 py-2.5 rounded-xl font-semibold"
  tracking={{ source: 'header', action: 'call' }}
>
  <svg
    class="w-5 h-5 text-white"
    fill="none"
    stroke="currentColor"
    stroke-width="2"
    viewBox="0 0 24 24"
    aria-hidden="true"
  >
    <path
      stroke-linecap="round"
      stroke-linejoin="round"
      d="M3 5a2 2 0 012-2h3.28a1 1 0 01.948.684l1.498 4.493a1 1 0 01-.502 1.21l-2.257 1.13a11.042 11.042 0 005.516 5.516l1.13-2.257a1 1 0 011.21-.502l4.493 1.498a1 1 0 01.684.949V19a2 2 0 01-2 2h-1C9.716 21 3 14.284 3 6V5z"
    />
  </svg>
  <span class="font-bold tracking-wide text-white">06&nbsp;30&nbsp;22&nbsp;12&nbsp;28</span>
</Button>
<Button
  href="/contact"
  ariaLabel="Demander un devis gratuit"
  variant="secondary"
  size="md"
  class="flex items-center gap-2 font-semibold"
  tracking={{ source: 'header', action: 'form_popup' }}
  data={{ 'open-popup': 'cta', category: 'conversion', channel: 'form' }}
>
  <svg
    class="w-5 h-5"
    fill="none"
    stroke="currentColor"
    stroke-width="2"
    viewBox="0 0 24 24"
    aria-hidden="true"
  >
    <path
      stroke-linecap="round"
      stroke-linejoin="round"
      d="M9 12h6m-6 4h6m2 5H7a2 2 0 01-2-2V5a2 2 0 012-2h5.586a1 1 0 01.707.293l5.414 5.414a1 1 0 01.293.707V19a2 2 0 01-2 2z"
    />
  </svg>
  <span class="tracking-wide">Devis gratuit</span>
</Button>



      </div>

      <!-- Burger mobile (< lg) -->
      <button
        id="menuButton"
        class="lg:hidden inline-flex items-center justify-center w-10 h-10 rounded-xl border border-neutral-200 bg-white shadow-soft hover:bg-neutral-50"
        aria-label="Menu"
        aria-expanded="false"
        aria-controls="mobileMenu"
      >
        <span id="menuLabel" class="sr-only">Ouvrir le menu</span>
        <svg xmlns="http://www.w3.org/2000/svg" class="w-5 h-5" viewBox="0 0 24 24" fill="currentColor" aria-hidden="true">
          <path id="icon-burger" d="M3 6h18v2H3V6zm0 5h18v2H3v-2zm0 5h18v2H3v-2z"/>
          <path id="icon-close" class="hidden" d="M18.3 5.71a.996.996 0 0 0-1.41 0L12 10.59 7.11 5.7A.996.996 0 1 0 5.7 7.11L10.59 12 5.7 16.89a.996.996 0 1 0 1.41 1.41L12 13.41l4.89 4.89a.996.996 0 1 0 1.41-1.41L13.41 12l4.89-4.89c.38-.38.38-1.02 0-1.4z"/>
        </svg>
      </button>
    </div>
  </div>

  <!-- Fine séparation visuelle desktop -->
  <div class="hidden lg:block border-t border-neutral-200"></div>
</div>

<!-- ===== Ligne 2 : NAV (non-sticky desktop) ===== -->
<!-- ===== Ligne 2 : NAV (non-sticky desktop) ===== -->
<header class="border-b border-neutral-200">
  <div class="container-responsive">
    <div class="hidden lg:block">
      <nav class="flex -mx-2" aria-label="Navigation principale">
        {items.map((item) => {
          const active = isActive(item.href);
          return (
            <a
              href={item.href}
              aria-current={active ? 'page' : undefined}
              class={[
                'group relative flex-1 px-2 py-3 text-center text-sm font-medium border-r last:border-r-0',
                'border-neutral-100 text-neutral-800',
                'hover:text-primary-700 hover:bg-primary-50/70',
                'focus:outline-none focus-visible:ring-2 focus-visible:ring-action-500 focus-visible:ring-offset-2',
                active ? 'text-primary-700 bg-primary-50/70 font-semibold' : ''
              ].join(' ')}
              data-source="header"
              data-action="nav"
            >
              <span>{item.label}</span>
              <span
                class={[
                  'pointer-events-none absolute left-4 right-4 -bottom-px h-0.5 rounded-full',
                  active ? 'bg-action-500' : 'bg-transparent group-hover:bg-action-500'
                ].join(' ')}
              />
            </a>
          );
        })}
      </nav>
    </div>
  </div>

  <!-- ===== Panneau mobile : nav + CTA ===== -->
  <div 
    id="mobileMenu"
    class="lg:hidden fixed inset-x-0 top-[64px] z-[80] 
           bg-black/30 backdrop-blur-sm
           pointer-events-none opacity-0 translate-y-2
           transition-all duration-300 ease-out"
    data-state="closed"
    aria-hidden="true"
  >
    <!-- Panel du menu compact -->
    <div class="bg-white border-b border-neutral-200 shadow-2xl rounded-b-2xl max-h-[70vh] overflow-y-auto">
      <div class="container-responsive py-4">
        <!-- Navigation mobile -->
        <nav class="flex flex-col gap-2 mb-4" aria-label="Navigation mobile">
          {items.map((item) => {
            const active = isActive(item.href);
            return (
              <a
                href={item.href}
                aria-current={active ? 'page' : undefined}
                class={[
                  'group block px-4 py-3 rounded-lg font-medium relative',
                  'hover:bg-primary-50/70 hover:text-primary-700',
                  'focus:outline-none focus-visible:ring-2 focus-visible:ring-action-500',
                  active ? 'bg-primary-50/70 text-primary-700 font-semibold' : 'text-neutral-800'
                ].join(' ')}
                data-source="mobile_menu"
                data-action="nav"
              >
                {item.label}
                {active && (
                  <span class="pointer-events-none absolute left-2 right-2 -bottom-0.5 h-0.5 rounded-full bg-action-500" />
                )}
              </a>
            );
          })}
        </nav>

        <!-- CTA mobile -->
        <div class="space-y-3 pt-4 border-t border-neutral-200">
          <CtaPhone
            size="md"
            variant="primary"
            className="w-full justify-center"
            phoneE164="+33630221228"
            display="06 30 22 12 28"
            trackingData={{ source: 'mobile_menu', action: 'call' }}
            showDisplayNext={true}
          />

          <Button
            href="/contact#formulaire"
            label="Demander un devis gratuit"
            variant="secondary"
            size="md"
            class="w-full justify-center"
            tracking={{ source: 'mobile_menu', action: 'lead' }}
            data={{ 'open-popup': 'cta' }}
          />
        </div>
      </div>
    </div>
  </div>
</header>



<style>
/* ===== Topbar (ombre au scroll) ===== */
#topBar { transition: box-shadow 0.2s ease; }

/* ===== CTA header : état masqué ===== */
#header-cta-buttons[data-hidden="true"] { display: none !important; }

/* ===== Menu mobile (sheet sous le header) ===== */
#mobileMenu {
  overflow: hidden;
  opacity: 0;
  transform: translateY(-8px);
  pointer-events: none;
  transition: opacity .3s ease, transform .3s ease;
}
#mobileMenu[data-state="open"] {
  opacity: 1 !important;
  transform: translateY(0) !important;
  pointer-events: auto;
  box-shadow: 0 8px 16px rgba(0,0,0,.06);
}

/* Backdrop “virtuel” via pseudo-élément pour fermer au clic autour si besoin */
#mobileMenu[data-state="open"]::before {
  content: '';
  position: fixed;
  inset: 0;
  z-index: -1;
}

/* ===== Liens nav (micro-anim) ===== */
header nav a { transition: transform .2s ease; will-change: transform; }
header nav a:hover { transform: translateY(-1px); }
header nav a:active { transform: translateY(.5px) scale(.99); }

/* ===== iOS rubber band ===== */
html.overflow-hidden, body.overflow-hidden { overscroll-behavior: contain; }

/* ===== Reduce motion ===== */
@media (prefers-reduced-motion: reduce) {
  #mobileMenu, #topBar, header nav a { transition: none !important; }
}
</style>

<script is:inline>
/* ===== Script Menu (ouverture/fermeture) ===== */
document.addEventListener('DOMContentLoaded', () => {
  if (window.__headerMenuInitialized) return;
  window.__headerMenuInitialized = true;

  const btn        = document.getElementById('menuButton');
  const menu       = document.getElementById('mobileMenu');
  const menuLabel  = document.getElementById('menuLabel');
  const iconBurger = document.getElementById('icon-burger');
  const iconClose  = document.getElementById('icon-close');
  const stickyBar  = document.getElementById('sticky-cta');

  if (!(btn && menu && menuLabel && iconBurger && iconClose)) return;

  let lastFocused = null;

  const open = () => {
    // cacher la barre flottante
    if (stickyBar) stickyBar.style.display = 'none';

    lastFocused = document.activeElement;

    // états & a11y
    menu.dataset.state = 'open';
    menu.setAttribute('aria-hidden', 'false');
    btn.setAttribute('aria-expanded', 'true');

    // UI
    iconBurger.classList.add('hidden');
    iconClose.classList.remove('hidden');
    menuLabel.textContent = 'Fermer le menu';

    // scroll lock + flag pour CSS externes
    document.documentElement.classList.add('overflow-hidden');
    document.documentElement.setAttribute('data-menu-open', 'true');

    // focus premier élément interactif
    const first = menu.querySelector('a, button, [tabindex]:not([tabindex="-1"])');
    if (first) first.focus({ preventScroll: true });

    // event global (floating bar écoute)
    window.dispatchEvent(new CustomEvent('sp:menu_open'));
  };

  const close = () => {
    // états & a11y
    menu.dataset.state = 'closed';
    menu.setAttribute('aria-hidden', 'true');
    btn.setAttribute('aria-expanded', 'false');

    // UI
    iconClose.classList.add('hidden');
    iconBurger.classList.remove('hidden');
    menuLabel.textContent = 'Ouvrir le menu';

    // scroll unlock + flag off
    document.documentElement.classList.remove('overflow-hidden');
    document.documentElement.removeAttribute('data-menu-open');

    // rendre le focus au bouton
    if (lastFocused && typeof lastFocused.focus === 'function') {
      lastFocused.focus();
    }

    // event global (floating bar se re-calculera)
    window.dispatchEvent(new CustomEvent('sp:menu_close'));
  };

  const toggle = () => (menu.dataset.state === 'open' ? close() : open());

  // Bouton burger
  btn.addEventListener('click', (e) => {
    e.preventDefault();
    e.stopPropagation();
    toggle();
  });

  // Fermer au clic sur un lien du menu
  menu.querySelectorAll('a').forEach(link => {
    link.addEventListener('click', () => {
      if (menu.dataset.state === 'open') close();
    });
  });

  // Fermer si on clique sur l’arrière-plan (pseudo-backdrop via ::before)
  menu.addEventListener('click', (e) => {
    if (e.target === menu && menu.dataset.state === 'open') close();
  });

  // Échappe
  document.addEventListener('keydown', (e) => {
    if (e.key === 'Escape' && menu.dataset.state === 'open') close();
  });

  // Ombre du topbar au scroll (visuel)
  const topBar = document.getElementById('topBar');
  if (topBar) {
    const onScrollShadow = () => {
      topBar.style.boxShadow = (window.scrollY > 2) ? '0 6px 18px rgba(0,0,0,0.06)' : 'none';
    };
    onScrollShadow();
    window.addEventListener('scroll', onScrollShadow, { passive: true });
  }
});
</script>

<script is:inline>
/* ===== Script CTA header (masqués quand le hero est visible) ===== */
document.addEventListener('DOMContentLoaded', () => {
  const cta = document.getElementById('header-cta-buttons');
  const bar = document.getElementById('topBar');
  if (!cta || !bar) return;

  // Masquer systématiquement sur /contact
  if (window.location.pathname.startsWith('/contact')) {
    cta.setAttribute('data-hidden', 'true');
    return;
  }

  const setHidden = (hidden) => {
    cta.setAttribute('data-hidden', hidden ? 'true' : 'false');
  };

  // État initial (si data-hidden déjà à true)
  if (cta.dataset.hidden === 'true') setHidden(true);

  // Observer le hero
  const hero = document.querySelector('[data-hero]') || document.getElementById('hero');
  if (hero && 'IntersectionObserver' in window) {
    const obs = new IntersectionObserver(
      ([entry]) => setHidden(!!entry.isIntersecting && entry.intersectionRatio > 0.1),
      { rootMargin: '-72px 0px 0px 0px', threshold: [0, 0.1, 0.2, 0.5, 1] }
    );
    obs.observe(hero);
  } else {
    // Fallback : cacher près du haut
    const nearTop = () => setHidden(window.scrollY < 160);
    nearTop();
    window.addEventListener('scroll', nearTop, { passive: true });
  }

  // Hooks menu (on laisse la logique principale décider)
  window.addEventListener('sp:menu_open', () => { /* no-op */ });
  window.addEventListener('sp:menu_close', () => { /* no-op */ });
});
</script>
