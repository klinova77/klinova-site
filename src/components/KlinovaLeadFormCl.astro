---
/**
 * KlinovaLeadForm — formulaire 2 étapes réutilisable + upload photos optimisé
 * 
 * Améliorations principales :
 * - Visual feedback amélioré
 * - Validation progressive 
 * - UX mobile optimisée
 * - Champs plus spécifiques Klinova
 * - Messages d'aide contextuels
 */

import { PHONE_DISPLAY, PHONE_E164 } from '~/lib/phone';
import { linkAttrs } from '~/lib/links';
import ButtonSubmit from '~/components/UI/ButtonSubmit.astro';

export interface Props {
  id?: string;
  title?: string;
  subtitle?: string;
  source?: string;
  parisOnly?: boolean;
  cloudName?: string;
  uploadPreset?: string;
  class?: string;
}

const {
  id = 'klinovaLeadForm',
  title = 'Un chargé d"affaires vous rappelle sous 4h',
  subtitle = 'Devis gratuit • Intervention rapide • Sans engagement',
  source = 'form-footer',
  parisOnly = false,
  cloudName = 'dgpeykj44',
  uploadPreset = 'form_upload',
  class: className = '',
} = Astro.props;

const formName = 'Formulaire de contact Klinova';
const formType = 'devis';
const cpPattern = parisOnly ? '^75[0-9]{3}$' : '^[0-9]{5}$';
const cpHelp = parisOnly ? 'Paris uniquement (75001 à 75020).' : 'Code postal sur 5 chiffres.';
---

<section id="formulaire" class={`section-padding bg-[#FCFCFC] ${className}`}>
  <div class="container-responsive max-w-5xl">

    <!-- En-tête amélioré -->
    <div class="text-center mb-8">
      <div class="inline-flex items-center gap-2 bg-[#DFF1E8] border border-[#C0E2D0] rounded-full px-4 py-2 mb-4">
        <svg class="w-4 h-4 text-[#3F8D65]" aria-hidden="true" fill="none" stroke="currentColor" viewBox="0 0 24 24">
          <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M5 13l4 4L19 7"/>
        </svg>
        <span class="text-sm font-medium text-[#3F8D65]">Techniciens certifiés • Intervention sous 48h</span>
      </div>

      <h2 class="text-3xl lg:text-4xl font-bold text-[#1E2939] mb-3">{title}</h2>
      <p class="text-[#475569] text-lg">{subtitle}</p>
    </div>

    <div class="grid lg:grid-cols-3 gap-8 lg:gap-10 items-start">
      <!-- FORMULAIRE PRINCIPAL -->
      <div class="lg:col-span-2">
        <div class="bg-white rounded-2xl border border-[#E5E7EB] p-6 lg:p-8 shadow-lg animate-fade-in">

          <!-- Status message avec style Klinova -->
          <div data-form-status aria-live="polite" class="text-sm mb-4 p-3 rounded-lg hidden">
            <div class="flex items-center gap-2">
              <div class="status-icon"></div>
              <span class="status-text"></span>
            </div>
          </div>

          <!-- Indicateur de progression amélioré -->
          <div class="mb-6">
            <div class="flex items-center justify-between mb-4">
              <div class="flex items-center gap-3" id="step1-indicator">
                <div class="w-8 h-8 rounded-full bg-[#3F8D65] text-white flex items-center justify-center text-sm font-semibold transition-colors">1</div>
                <span class="font-medium text-[#1E2939]">Contact essentiel</span>
              </div>
              <div class="flex items-center gap-3 opacity-50" id="step2-indicator">
                <div class="w-8 h-8 rounded-full border-2 border-[#E5E7EB] text-[#475569] flex items-center justify-center text-sm transition-colors">2</div>
                <span class="text-sm text-[#475569] hidden sm:block">Détails de votre projet</span>
              </div>
            </div>
            <!-- Barre de progression -->
            <div class="w-full bg-[#E5E7EB] rounded-full h-2">
              <div class="bg-[#3F8D65] h-2 rounded-full transition-all duration-500 ease-out" style="width: 50%" id="progress-bar"></div>
            </div>
          </div>

          <form
            id={id}
            action="/api/contact"
            method="POST"
            class="space-y-6"
            data-source={source}
            data-intent="lead"
            data-form-name={formName}
            data-form-type={formType}
            data-value="290"
            data-cloud-name={cloudName}
            data-upload-preset={uploadPreset}
          >
            <!-- Honeypot anti-spam -->
            <input type="text" name="website" tabindex="-1" autocomplete="off" class="hidden" aria-hidden="true" />

            <!-- ÉTAPE 1 : Contact essentiel -->
            <div data-step="1" class="space-y-5">
              <div class="grid sm:grid-cols-2 gap-4">
                
                <!-- PRÉNOM avec validation visuelle -->
                <div class="relative">
                  <label for={`${id}-prenom`} class="block text-sm font-semibold text-[#1E2939] mb-2">
                    Votre prénom <span class="text-[#475569] font-normal">(optionnel)</span>
                  </label>
                  <div class="relative">
                    <input
                      type="text"
                      id={`${id}-prenom`}
                      name="prenom"
                      autocomplete="given-name"
                      class="w-full pl-12 pr-10 py-4 rounded-xl border border-[#E5E7EB] focus:border-[#3F8D65] focus:ring-2 focus:ring-[#3F8D65]/20 outline-none transition-all text-base hover:border-[#C0E2D0]"
                      placeholder="Ex. Jean"
                    />
                    <svg class="absolute left-4 top-1/2 -translate-y-1/2 w-5 h-5 text-[#475569]" aria-hidden="true" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                      <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M16 7a4 4 0 11-8 0 4 4 0 018 0zM12 14a7 7 0 00-7 7h14a7 7 0 00-7-7z"/>
                    </svg>
                    <div class="absolute right-3 top-1/2 -translate-y-1/2 w-5 h-5 hidden" id={`${id}-prenom-check`}>
                      <svg class="w-5 h-5 text-[#3F8D65]" aria-hidden="true" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                        <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M5 13l4 4L19 7"/>
                      </svg>
                    </div>
                  </div>
                  <small class="text-xs text-red-600 hidden mt-1" data-error-for="prenom"></small>
                </div>

                <!-- TÉLÉPHONE avec masque amélioré -->
                <div class="relative">
                  <label for={`${id}-telephone`} class="block text-sm font-semibold text-[#1E2939] mb-2">
                    Votre numéro <span class="text-red-500">*</span>
                  </label>
                  <div class="relative">
                    <input
                      type="tel"
                      id={`${id}-telephone`}
                      name="telephone"
                      required
                      inputmode="tel"
                      autocomplete="tel"
                      class="w-full pl-12 pr-10 py-4 rounded-xl border border-[#E5E7EB] focus:border-[#3F8D65] focus:ring-2 focus:ring-[#3F8D65]/20 outline-none transition-all text-base hover:border-[#C0E2D0]"
                      placeholder="06 12 34 56 78"
                    />
                    <svg class="absolute left-4 top-1/2 -translate-y-1/2 w-5 h-5 text-[#475569]" aria-hidden="true" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                      <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M3 5a2 2 0 012-2h3.28a1 1 0 01.948.684l1.498 4.493a1 1 0 01-.502 1.21l-2.257 1.13a11.042 11.042 0 005.516 5.516l1.13-2.257a1 1 0 011.21-.502l4.493 1.498a1 1 0 01.684.949V19a2 2 0 01-2 2h-1C9.716 21 3 14.284 3 6V5z"/>
                    </svg>
                    <div class="absolute right-3 top-1/2 -translate-y-1/2 w-5 h-5 hidden" id={`${id}-telephone-check`}>
                      <svg class="w-5 h-5 text-[#3F8D65]" aria-hidden="true" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                        <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M5 13l4 4L19 7"/>
                      </svg>
                    </div>
                  </div>
                  <small class="text-xs text-red-600 hidden mt-1" data-error-for="telephone"></small>
                  <small class="text-xs text-[#475569] mt-1">Nous vous rappelons sous 4h pour votre devis</small>
                </div>
              </div>

              <!-- CODE POSTAL avec validation contextuelle -->
              <div class="relative">
                <label for={`${id}-cp`} class="block text-sm font-semibold text-[#1E2939] mb-2">
                  Code postal de l'intervention <span class="text-red-500">*</span>
                </label>
                <div class="relative">
                  <input
                    type="text"
                    id={`${id}-cp`}
                    name="code_postal"
                    required
                    inputmode="numeric"
                    pattern={cpPattern}
                    autocomplete="postal-code"
                    class="w-full pl-12 pr-10 py-4 rounded-xl border border-[#E5E7EB] focus:border-[#3F8D65] focus:ring-2 focus:ring-[#3F8D65]/20 outline-none transition-all text-base hover:border-[#C0E2D0]"
                    placeholder={parisOnly ? "75001" : "92100"}
                  />
                  <svg class="absolute left-4 top-1/2 -translate-y-1/2 w-5 h-5 text-[#475569]" aria-hidden="true" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                    <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M17.657 16.657L13.414 20.9a1.998 1.998 0 01-2.827 0l-4.244-4.243a8 8 0 1111.314 0z"/>
                    <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M15 11a3 3 0 11-6 0 3 3 0 016 0z"/>
                  </svg>
                  <div class="absolute right-3 top-1/2 -translate-y-1/2 w-5 h-5 hidden" id={`${id}-cp-check`}>
                    <svg class="w-5 h-5 text-[#3F8D65]" aria-hidden="true" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                      <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M5 13l4 4L19 7"/>
                    </svg>
                  </div>
                </div>
                <small class="text-xs text-red-600 hidden mt-1" data-error-for="code_postal"></small>
                <small class="text-xs text-[#475569] mt-1">{cpHelp}</small>
              </div>

              <!-- Boutons d'action étape 1 -->
              <div class="flex flex-col sm:flex-row gap-3 pt-4">
                <button
                  type="button"
                  data-action="next-step"
                  class="flex-1 bg-[#3F8D65] hover:bg-[#387B58] text-white font-semibold py-4 px-6 rounded-xl transition-all duration-200 flex items-center justify-center gap-2 shadow-lg shadow-[#3F8D65]/25"
                >
                  Continuer
                  <svg class="w-5 h-5" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                    <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M13 7l5 5m0 0l-5 5m5-5H6"/>
                  </svg>
                </button>
                <button
                  type="button"
                  data-open-step2
                  class="text-[#3F8D65] hover:text-[#387B58] font-medium py-2 px-4 rounded-xl transition-colors underline underline-offset-4"
                >
                  Ajouter des détails (optionnel)
                </button>
              </div>
            </div>

            <!-- ÉTAPE 2 : Détails du projet -->
            <div data-step="2" class="space-y-5 hidden">
              
              <!-- EMAIL avec validation améliorée -->
              <div class="relative">
                <label for={`${id}-email`} class="block text-sm font-semibold text-[#1E2939] mb-2">
                  Votre email <span class="text-[#475569] font-normal">(optionnel)</span>
                </label>
                <div class="relative">
                  <input
                    type="email"
                    id={`${id}-email`}
                    name="email"
                    autocomplete="email"
                    class="w-full pl-12 pr-10 py-4 rounded-xl border border-[#E5E7EB] focus:border-[#3F8D65] focus:ring-2 focus:ring-[#3F8D65]/20 outline-none transition-all text-base hover:border-[#C0E2D0]"
                    placeholder="votre@email.fr"
                  />
                  <svg class="absolute left-4 top-1/2 -translate-y-1/2 w-5 h-5 text-[#475569]" aria-hidden="true" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                    <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M3 8l7.89 4.26a2 2 0 002.22 0L21 8M5 19h14a2 2 0 002-2V7a2 2 0 00-2-2H5a2 2 0 00-2 2v10a2 2 0 002 2z"/>
                  </svg>
                </div>
                <small class="text-xs text-red-600 hidden mt-1" data-error-for="email"></small>
                <small class="text-xs text-[#475569] mt-1">Pour recevoir votre devis par email</small>
              </div>

              <!-- TYPE DE SURFACE spécifique Klinova -->
              <div class="relative">
                <label for={`${id}-surface`} class="block text-sm font-semibold text-[#1E2939] mb-2">
                  Type et surface à nettoyer
                </label>
                <select
                  id={`${id}-surface`}
                  name="surface"
                  class="w-full pl-12 pr-10 py-4 rounded-xl border border-[#E5E7EB] focus:border-[#3F8D65] focus:ring-2 focus:ring-[#3F8D65]/20 outline-none transition-all text-base bg-white hover:border-[#C0E2D0]"
                >
                  <option value="">Sélectionnez le type de surface</option>
                  <option value="moquette-bureau-petit">Moquette bureau (≤ 20m²)</option>
                  <option value="moquette-bureau-moyen">Moquette bureau (21-50m²)</option>
                  <option value="moquette-bureau-grand">Moquette bureau (> 50m²)</option>
                  <option value="moquette-habitation">Moquette habitation</option>
                  <option value="moquette-hotel">Moquette hôtel/résidence</option>
                  <option value="moquette-escalier">Moquette d'escalier</option>
                  <option value="tapis-artisanal">Tapis artisanal/précieux</option>
                  <option value="autre">Autre (préciser dans le message)</option>
                </select>
                <svg class="absolute left-4 top-1/2 -translate-y-1/2 w-5 h-5 text-[#475569]" aria-hidden="true" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                  <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M4 6a2 2 0 012-2h2a2 2 0 012 2v2a2 2 0 01-2 2H6a2 2 0 01-2-2V6zM14 6a2 2 0 012-2h2a2 2 0 012 2v2a2 2 0 01-2 2h-2a2 2 0 01-2-2V6zM4 16a2 2 0 012-2h2a2 2 0 012 2v2a2 2 0 01-2 2H6a2 2 0 01-2-2v-2zM14 16a2 2 0 012-2h2a2 2 0 012 2v2a2 2 0 01-2 2h-2a2 2 0 01-2-2v-2z"/>
                </svg>
              </div>

              <!-- MESSAGE avec compteur de caractères -->
              <div class="relative">
                <label for={`${id}-message`} class="block text-sm font-semibold text-[#1E2939] mb-2">
                  Décrivez votre besoin
                </label>
                <textarea
                  id={`${id}-message`}
                  name="message"
                  rows="4"
                  maxlength="500"
                  class="w-full p-4 rounded-xl border border-[#E5E7EB] focus:border-[#3F8D65] focus:ring-2 focus:ring-[#3F8D65]/20 outline-none transition-all text-base resize-none hover:border-[#C0E2D0]"
                  placeholder="Ex: Moquette de bureau tachée, environ 30m², besoin d'intervention rapide..."
                ></textarea>
                <div class="flex justify-between items-center mt-1">
                  <small class="text-xs text-[#475569]">Décrivez l'état, les taches, l'urgence...</small>
                  <small class="text-xs text-[#475569]" id="char-count">0/500</small>
                </div>
              </div>

              <!-- UPLOAD PHOTOS amélioré -->
              <div class="relative">
                <label class="block text-sm font-semibold text-[#1E2939] mb-2">
                  Photos de vos moquettes <span class="text-[#475569] font-normal">(optionnel)</span>
                </label>
                <div class="border-2 border-dashed border-[#E5E7EB] rounded-xl p-6 text-center hover:border-[#3F8D65] transition-colors">
                  <input
                    type="file"
                    id={`${id}-photos`}
                    name="photos"
                    multiple
                    accept="image/*"
                    class="hidden"
                  />
                  <label for={`${id}-photos`} class="cursor-pointer block">
                    <svg class="w-12 h-12 text-[#475569] mx-auto mb-3" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                      <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M4 16l4.586-4.586a2 2 0 012.828 0L16 16m-2-2l1.586-1.586a2 2 0 012.828 0L20 14m-6-6h.01M6 20h12a2 2 0 002-2V6a2 2 0 00-2-2H6a2 2 0 00-2 2v12a2 2 0 002 2z"/>
                    </svg>
                    <p class="text-[#1E2939] font-medium mb-1">Cliquez pour ajouter des photos</p>
                    <p class="text-xs text-[#475569]">Maximum 5 photos • 10 MB par photo • JPG, PNG</p>
                  </label>
                </div>
                <!-- Preview container -->
                <div id={`${id}-photos-preview`} class="grid grid-cols-3 gap-3 mt-4 hidden"></div>
                <!-- Hidden inputs container -->
                <div id={`${id}-photos-hidden`} class="hidden"></div>
              </div>

              <!-- Boutons étape 2 -->
              <div class="flex flex-col sm:flex-row gap-3 pt-6 border-t border-[#E5E7EB]">
                <button
                  type="button"
                  data-prev-step
                  class="order-2 sm:order-1 text-[#475569] hover:text-[#1E2939] font-medium py-3 px-6 rounded-xl transition-colors border border-[#E5E7EB] hover:border-[#C0E2D0]"
                >
                  ← Retour
                </button>
                <ButtonSubmit class="order-1 sm:order-2 flex-1 bg-[#3F8D65] hover:bg-[#387B58] text-white font-semibold py-4 px-6 rounded-xl transition-all duration-200 shadow-lg shadow-[#3F8D65]/25">
                  Envoyer ma demande
                </ButtonSubmit>
              </div>
            </div>
          </form>
        </div>
      </div>

      <!-- SIDEBAR informative -->
      <div class="space-y-6">
        <!-- Contact direct -->
        <div class="bg-white rounded-2xl border border-[#E5E7EB] p-6 shadow-lg">
          <h3 class="font-bold text-[#1E2939] mb-4 flex items-center gap-2">
            <svg class="w-5 h-5 text-[#3F8D65]" fill="none" stroke="currentColor" viewBox="0 0 24 24">
              <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M3 5a2 2 0 012-2h3.28a1 1 0 01.948.684l1.498 4.493a1 1 0 01-.502 1.21l-2.257 1.13a11.042 11.042 0 005.516 5.516l1.13-2.257a1 1 0 011.21-.502l4.493 1.498a1 1 0 01.684.949V19a2 2 0 01-2 2h-1C9.716 21 3 14.284 3 6V5z"/>
            </svg>
            Besoin d'aide immédiate ?
          </h3>
          <a
            href={`tel:${PHONE_E164}`}
            class="block w-full bg-[#3F8D65] hover:bg-[#387B58] text-white font-semibold py-3 px-4 rounded-xl text-center transition-colors mb-3"
          >
            {PHONE_DISPLAY}
          </a>
          <p class="text-xs text-[#475569] text-center">
            Disponible 7j/7 • Urgences acceptées
          </p>
        </div>

        <!-- Garanties -->
        <div class="bg-white rounded-2xl border border-[#E5E7EB] p-6 shadow-lg">
          <h3 class="font-bold text-[#1E2939] mb-4">Nos garanties</h3>
          <div class="space-y-3 text-sm">
            <div class="flex items-start gap-3">
              <svg class="w-5 h-5 text-[#3F8D65] mt-0.5 flex-shrink-0" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M5 13l4 4L19 7"/>
              </svg>
              <span class="text-[#475569]">Devis gratuit sous 24h</span>
            </div>
            <div class="flex items-start gap-3">
              <svg class="w-5 h-5 text-[#3F8D65] mt-0.5 flex-shrink-0" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M5 13l4 4L19 7"/>
              </svg>
              <span class="text-[#475569]">Intervention sous 48h</span>
            </div>
            <div class="flex items-start gap-3">
              <svg class="w-5 h-5 text-[#3F8D65] mt-0.5 flex-shrink-0" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M5 13l4 4L19 7"/>
              </svg>
              <span class="text-[#475569]">Produits éco-responsables</span>
            </div>
            <div class="flex items-start gap-3">
              <svg class="w-5 h-5 text-[#3F8D65] mt-0.5 flex-shrink-0" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M5 13l4 4L19 7"/>
              </svg>
              <span class="text-[#475569]">Séchage rapide 2-6h</span>
            </div>
          </div>
        </div>

        <!-- Zone d'intervention -->
        <div class="bg-[#DFF1E8] rounded-2xl border border-[#C0E2D0] p-6">
          <h3 class="font-bold text-[#1E2939] mb-3">Paris & Île-de-France</h3>
          <p class="text-sm text-[#475569] mb-3">
            Nous intervenons dans toute l'Île-de-France avec des délais adaptés selon la zone.
          </p>
          <div class="text-xs text-[#475569] space-y-1">
            <div>• Paris intra-muros : 24h</div>
            <div>• Petite couronne : 48h</div>
            <div>• Grande couronne : sur devis</div>
          </div>
        </div>
      </div>
    </div>
  </div>
</section>

<!-- Script JavaScript amélioré -->
<script
  is:inline
  data-form-id={id}
  data-cloud-name={cloudName}
  data-upload-preset={uploadPreset}
>
(() => {
  if (document.readyState === 'loading') {
    document.addEventListener('DOMContentLoaded', init);
  } else {
    init();
  }

  function init() {
    // ✅ Récupère les valeurs injectées côté serveur sans `${...}`
    const s = document.currentScript;
    const FORM_ID = s?.getAttribute('data-form-id') || 'klinovaLeadForm';
    const CLOUD_NAME = s?.getAttribute('data-cloud-name') || '';
    const UPLOAD_PRESET = s?.getAttribute('data-upload-preset') || '';

    window.dataLayer = window.dataLayer || [];

    const form = document.getElementById(FORM_ID);
    if (!form) return;

    // DOM
    const qs = (sel) => form.querySelector(sel);
    const statusEl       = qs('[data-form-status]');
    const step1          = qs('[data-step="1"]');
    const step2          = qs('[data-step="2"]');
    const telephone      = qs(`#${FORM_ID}-telephone`);
    const email          = qs(`#${FORM_ID}-email`);
    const cp             = qs(`#${FORM_ID}-cp`);
    const message        = qs(`#${FORM_ID}-message`);
    const photosInput    = qs(`#${FORM_ID}-photos`);
    const photosPreview  = document.getElementById(`${FORM_ID}-photos-preview`);
    const photosHidden   = document.getElementById(`${FORM_ID}-photos-hidden`);
    const progressBar    = form.parentElement?.querySelector('#progress-bar');
    const step1Indicator = form.parentElement?.querySelector('#step1-indicator');
    const step2Indicator = form.parentElement?.querySelector('#step2-indicator');

    // Helpers
    const show = (el) => { if (el) { el.classList.remove('hidden'); el.setAttribute('aria-hidden','false'); } };
    const hide = (el) => { if (el) { el.classList.add('hidden');    el.setAttribute('aria-hidden','true');  } };
    const setStatus = (msg, ok=true) => {
      if (!statusEl) return;
      const textEl = statusEl.querySelector('.status-text');
      const iconEl = statusEl.querySelector('.status-icon');
      if (textEl) textEl.textContent = msg || '';
      statusEl.classList.toggle('hidden', !msg);
      if (msg) {
        statusEl.className = `text-sm mb-4 p-3 rounded-lg flex items-center gap-2 ${
          ok ? 'bg-green-50 border border-green-200 text-green-800' : 'bg-red-50 border border-red-200 text-red-800'
        }`;
        if (iconEl) {
          iconEl.innerHTML = ok
            ? '<svg class="w-4 h-4" fill="none" stroke="currentColor" viewBox="0 0 24 24"><path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M5 13l4 4L19 7"/></svg>'
            : '<svg class="w-4 h-4" fill="none" stroke="currentColor" viewBox="0 0 24 24"><path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M6 18L18 6M6 6l12 12"/></svg>';
        }
      }
    };
    const setError = (name, msg) => {
      const el = form.querySelector(`[data-error-for="${name}"]`);
      if (el) { el.textContent = msg || ''; el.classList.toggle('hidden', !msg); }
    };

    // Validation
    const normalizePhone = (s='') => { let v=s.replace(/[^\d+]/g,''); if (v.startsWith('00')) v='+'+v.slice(2); return v; };
    const isValidPhoneFR = (s) => { const v=normalizePhone(s); return /^0[1-9]\d{8}$/.test(v) || /^\+33[1-9]\d{8}$/.test(v); };
    const isValidEmail   = (s) => !s || /^[^\s@]+@[^\s@]+\.[^\s@]+$/.test((s||'').trim());
    const isValidPostalCode = (input) => {
      if (!input) return true;
      const v = (input.value || '').trim();
      if (!v) return true;                   // vide = OK pour passer à l’étape 2 (le champ est “required” seulement à la soumission)
      const pat = input.getAttribute('pattern');
      if (pat) { try { return new RegExp(pat).test(v); } catch { return /^\d{5}$/.test(v); } }
      return /^\d{5}$/.test(v);
    };

    // Progress / steps
    function updateProgress(step) {
      if (progressBar) progressBar.style.width = step === 1 ? '50%' : '100%';
      if (step1Indicator && step2Indicator) {
        const c1 = step1Indicator.querySelector('.w-8');
        const c2 = step2Indicator.querySelector('.w-8');
        if (step === 1) {
          c1.className = 'w-8 h-8 rounded-full bg-[#3F8D65] text-white flex items-center justify-center text-sm font-semibold transition-colors';
          c2.className = 'w-8 h-8 rounded-full border-2 border-[#E5E7EB] text-[#475569] flex items-center justify-center text-sm transition-colors';
          step2Indicator.classList.add('opacity-50');
        } else {
          c1.className = 'w-8 h-8 rounded-full bg-[#C0E2D0] text-[#3F8D65] flex items-center justify-center text-sm font-semibold transition-colors';
          c2.className = 'w-8 h-8 rounded-full bg-[#3F8D65] text-white flex items-center justify-center text-sm font-semibold transition-colors';
          step2Indicator.classList.remove('opacity-50');
        }
      }
    }

    function goToStep2(force=false) {
      const phone = (telephone?.value || '').trim();
      if (!force && !isValidPhoneFR(phone)) {
        setError('telephone','Numéro français requis pour continuer');
        telephone?.focus();
        return;
      }
      if (!force && !isValidPostalCode(cp)) {
        setError('code_postal','Code postal requis pour continuer');
        cp?.focus();
        return;
      }
      hide(step1); show(step2); updateProgress(2); setStatus('');
      setTimeout(() => step2?.querySelector('input,select,textarea')?.focus(), 100);
    }
    function backToStep1() {
      hide(step2); show(step1); updateProgress(1); setStatus('');
      setTimeout(() => telephone?.focus(), 100);
    }

    // Délégation de clics
    form.addEventListener('click', (e) => {
      const next  = e.target.closest('[data-action="next-step"]');
      const open2 = e.target.closest('[data-open-step2]');
      const prev  = e.target.closest('[data-prev-step]');
      if (next)  { e.preventDefault(); goToStep2(false); }
      if (open2) { e.preventDefault(); goToStep2(true);  }
      if (prev)  { e.preventDefault(); backToStep1();    }
    });

    // Masque téléphone
    if (telephone) {
      const telCheck = qs(`#${FORM_ID}-telephone-check`);
      telephone.addEventListener('input', (e) => {
        const input = e.target;
        let v = (input.value || '').replace(/[^\d+]/g,'');
        let formatted = '';
        if (v.startsWith('+33')) {
          let rest = v.slice(3).replace(/\D/g,'');
          if (rest.startsWith('0')) rest = rest.slice(1);
          rest = rest.slice(0,9);
          const chunks = []; if (rest.length>0) chunks.push(rest.slice(0,1));
          for (let i=1;i<rest.length;i+=2) chunks.push(rest.slice(i,i+2));
          formatted = '+33 ' + chunks.join(' ');
        } else {
          let digits = v.replace(/\D/g,'').slice(0,10);
          const chunks = [];
          if (digits.length>=2) { chunks.push(digits.slice(0,2)); for (let i=2;i<digits.length;i+=2) chunks.push(digits.slice(i,i+2)); }
          else { chunks.push(digits); }
          formatted = chunks.join(' ');
        }
        input.value = formatted.trim();
        const ok = isValidPhoneFR(input.value);
        input.classList.toggle('border-green-300', ok);
        input.classList.toggle('border-red-300', !ok && input.value.length>0);
        if (telCheck) telCheck.classList.toggle('hidden', !ok);
        setError('telephone', ok || !input.value ? '' : 'Format invalide');
      });
    }

    // CP live
    if (cp) {
      const cpCheck = qs(`#${FORM_ID}-cp-check`);
      cp.addEventListener('input', (e) => {
        const input = e.target;
        const ok = isValidPostalCode(input);
        input.classList.toggle('border-green-300', ok && input.value.length>0);
        input.classList.toggle('border-red-300', !ok && input.value.length>0);
        if (cpCheck) cpCheck.classList.toggle('hidden', !ok || !input.value);
        setError('code_postal', ok || !input.value ? '' : 'Code postal invalide');
      });
    }

    // Compteur message
    if (message) {
      const charCount = form.parentElement?.querySelector('#char-count');
      message.addEventListener('input', (e) => {
        const n = e.target.value.length;
        if (charCount) {
          charCount.textContent = `${n}/500`;
          charCount.classList.toggle('text-red-500', n>450);
        }
      });
    }

    // Upload photos (Cloudinary unsigned)
    const MAX_FILES = 5, MAX_MB = 10;
    function resetPhotos(){ if (photosHidden) photosHidden.innerHTML=''; if (photosPreview){ photosPreview.innerHTML=''; photosPreview.classList.add('hidden'); } }
    function addHiddenUrl(url){ if (!photosHidden) return; const h=document.createElement('input'); h.type='hidden'; h.name='photos[]'; h.value=url; photosHidden.appendChild(h); }
    function addPreview(url, name){
      if (!photosPreview) return;
      photosPreview.classList.remove('hidden');
      const wrap = document.createElement('div'); wrap.className='relative group';
      const img = document.createElement('img'); img.src=url; img.alt=name||'Photo'; img.loading='lazy'; img.className='w-full h-24 object-cover rounded-lg border border-[#E5E7EB]';
      const btn = document.createElement('button'); btn.type='button'; btn.className='absolute top-1 right-1 bg-red-500 hover:bg-red-600 text-white rounded-full w-6 h-6 flex items-center justify-center text-xs opacity-0 group-hover:opacity-100 transition-opacity'; btn.innerHTML='×';
      btn.onclick=()=>{ wrap.remove(); photosHidden?.querySelectorAll('input')?.forEach(i=>{ if(i.value===url) i.remove(); }); if (!photosPreview.children.length) photosPreview.classList.add('hidden'); };
      wrap.appendChild(img); wrap.appendChild(btn); photosPreview.appendChild(wrap);
    }
    async function uploadToCloudinary(file){
      if (!CLOUD_NAME || !UPLOAD_PRESET) throw new Error('Configuration Cloudinary manquante');
      const fd=new FormData(); fd.append('file',file); fd.append('upload_preset',UPLOAD_PRESET);
      const res=await fetch(`https://api.cloudinary.com/v1_1/${CLOUD_NAME}/image/upload`,{method:'POST',body:fd});
      if (!res.ok) throw new Error(`Échec upload: ${res.status}`); return res.json();
    }
    if (photosInput) {
      photosInput.addEventListener('change', async () => {
        const files = Array.from(photosInput.files || []);
        if (!files.length){ resetPhotos(); return; }
        const valid = files.slice(0,MAX_FILES).filter(f=>/^image\//.test(f.type) && f.size<=MAX_MB*1024*1024);
        if (valid.length < files.length) setStatus(`${files.length - valid.length} fichier(s) ignoré(s)`, false);
        if (!valid.length) return;
        photosInput.disabled = true; setStatus(`Upload de ${valid.length} photo(s)…`, true);
        try {
          for (const f of valid) {
            const data = await uploadToCloudinary(f);
            if (data?.secure_url) { addHiddenUrl(data.secure_url); addPreview(data.secure_url, f.name); }
          }
          setStatus(`Photo(s) ajoutée(s) ✔`, true);
        } catch (e) {
          console.error(e); setStatus(`Erreur d'upload. Continuez sans photos.`, false);
        } finally {
          photosInput.disabled = false; setTimeout(()=>setStatus(''),3000);
        }
      });
    }

    // Submit
    form.addEventListener('submit', async (ev) => {
      ev.preventDefault(); setStatus('');
      ['telephone','email','code_postal'].forEach(n=>setError(n,''));
      const okPhone = isValidPhoneFR(telephone?.value || '');
      const okEmail = isValidEmail(email?.value || '');
      const okCP    = isValidPostalCode(cp);
      if (!okPhone) setError('telephone','Numéro français requis');
      if (!okEmail) setError('email','Format email invalide');
      if (!okCP)   setError('code_postal','Code postal requis');
      if (!(okPhone && okEmail && okCP)) { setStatus('Veuillez corriger les erreurs ci-dessus', false); return; }

      const submitBtn = form.querySelector('button[type="submit"]');
      if (submitBtn){ submitBtn.dataset._originalText=submitBtn.textContent||''; submitBtn.disabled=true; submitBtn.setAttribute('aria-busy','true'); submitBtn.textContent='Envoi en cours...'; }

      try {
        const fd = new FormData(form); fd.append('form_context','klinova_lead_form');
        const res = await fetch(form.action, { method:'POST', body:fd });
        if (!res.ok) {
          const txt = await res.text().catch(()=> '');
          setStatus(txt || 'Erreur lors de l’envoi. Veuillez réessayer.', false);
          window.dataLayer.push({ event:'lead_error', formId:FORM_ID, reason:'http_error', status:res.status });
          return;
        }
        window.dataLayer.push({ event:'lead_generated', formId:FORM_ID, source:form.dataset.source||'form-footer', formType:form.dataset.formType||'devis' });

        form.setAttribute('aria-hidden','true'); form.style.pointerEvents='none';
        form.innerHTML = `
          <div class="text-center py-8 animate-fade-in">
            <div class="w-16 h-16 bg-green-100 rounded-full flex items-center justify-center mx-auto mb-4">
              <svg class="w-8 h-8 text-green-600" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M5 13l4 4L19 7"/>
              </svg>
            </div>
            <h3 class="text-xl font-bold text-[#1E2939] mb-2">Demande envoyée !</h3>
            <p class="text-[#475569] max-w-md mx-auto">Nous vous recontactons sous <strong>4 heures</strong> pour votre devis personnalisé.</p>
            <p class="mt-6 text-sm text-[#475569]">Redirection automatique...</p>
          </div>`;
        try { form.scrollIntoView({ behavior:'smooth', block:'center' }); } catch {}
        setTimeout(()=>{ window.location.assign('/contact'); }, 3500);
      } catch (e) {
        console.error(e); setStatus('Erreur de connexion. Veuillez réessayer ou nous appeler.', false);
        window.dataLayer.push({ event:'lead_error', formId:FORM_ID, reason:'network_error' });
      } finally {
        const submitBtn2 = form.querySelector('button[type="submit"]');
        if (submitBtn2){ submitBtn2.disabled=false; submitBtn2.setAttribute('aria-busy','false'); submitBtn2.textContent = submitBtn2.dataset._originalText || 'Envoyer ma demande'; }
      }
    });

    // Init
    updateProgress(1);
    console.log('[KlinovaForm] Initialisation OK pour', FORM_ID);
  }
})();
</script>

<style>
/* Animations personnalisées */
@keyframes fade-in {
  from { opacity: 0; transform: translateY(10px); }
  to { opacity: 1; transform: translateY(0); }
}

.animate-fade-in {
  animation: fade-in 0.3s ease-out;
}

/* États de validation visuels */
.border-green-300 {
  border-color: #86efac !important;
  box-shadow: 0 0 0 2px rgba(134, 239, 172, 0.2) !important;
}

.border-red-300 {
  border-color: #fca5a5 !important;
  box-shadow: 0 0 0 2px rgba(252, 165, 165, 0.2) !important;
}

/* Améliorations upload */
#formulaire input[type="file"] + label:hover {
  background-color: rgba(63, 141, 101, 0.05);
}

/* Responsive amélioré */
@media (max-width: 640px) {
  .grid.sm\\:grid-cols-2 {
    grid-template-columns: 1fr;
  }
  
  .flex.sm\\:flex-row {
    flex-direction: column;
  }
  
  .order-2.sm\\:order-1 {
    order: 1;
  }
  
  .order-1.sm\\:order-2 {
    order: 2;
  }
}
</style>