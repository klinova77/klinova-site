---
// src/components/UI/FloatingBottomCTA.astro
import Button from '~/components/UI/Button.astro';

export interface Props {
  phoneE164?: string;
  display?: string;
  enabled?: boolean;
  mobileOnly?: boolean;
  showAfter?: 'immediate' | 'scroll';
  colorMode?: 'instant' | 'progressive';
  hideSelector?: string;
  activateSelector?: string;
  activateDelayMs?: number;
  className?: string;
}

const {
  phoneE164 = '+33630221228',
  display = '06 30 22 12 28',
  enabled = true,
  mobileOnly = true,
  showAfter = 'scroll',
  colorMode = 'progressive',
  hideSelector = '[data-hide-floating-cta]',
  activateSelector = '[data-activate-floating-cta]',
  activateDelayMs = 600,
  className = '',
} = Astro.props as Props;
---

{enabled && (
  <div
    id="sticky-cta"
    role="region"
    aria-label="Actions rapides : appel ou devis"
    data-showafter={showAfter}
    data-colormode={colorMode}
    data-hideselector={hideSelector}
    data-activateselector={activateSelector}
    data-activatedelay={String(activateDelayMs)}
    data-state="hidden"
    style="display:none"
    class:list={[
      // container
      'fixed bottom-0 inset-x-0 border-t border-neutral-200 bg-white shadow-2xl',
      // safe area
      'pb-[max(env(safe-area-inset-bottom),12px)]',
      // z-index tr√®s √©lev√©
      'z-[2147483647]',
      // animation de base (g√©r√©e via data-state)
      'transition-[transform,opacity] duration-300 ease-out',
      // mobile only si demand√©
      mobileOnly ? 'lg:hidden' : '',
      className,
    ]}
  >
    <div class="container-responsive py-3 flex items-center gap-3">
      <!-- üìû Appel (gauche) -->
      <Button
        href={`tel:${phoneE164}`}
        ariaLabel={`Appeler le ${display}`}
        variant="secondary"
        size="md"
        class="flex-[1.2] min-h-[52px] py-3.5 rounded-xl text-sm font-semibold active:scale-95 text-center"
        tracking={{ source: 'mobile_bar_bottom', action: 'call_direct', intent: 'urgent_contact' }}
      >
        <svg class="w-5 h-5" fill="none" stroke="currentColor" viewBox="0 0 24 24" aria-hidden="true">
          <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2"
            d="M3 5a2 2 0 012-2h3.28a1 1 0 01.948.684l1.498 4.493a1 1 0 01-.502 1.21l-2.257 1.13a11.042 11.042 0 005.516 5.516l1.13-2.257a1 1 0 011.21-.502l4.493 1.498a1 1 0 01.684.949V19a2 2 0 01-2 2h-1C9.716 21 3 14.284 3 6V5z" />
        </svg>
        <span class="font-semibold">{display}</span>
      </Button>

      <!-- üßæ Devis (droite) ‚Äî c‚Äôest LUI qui devient vert -->
    <Button
  href="/contact#formulaire"
  ariaLabel="Demander un devis gratuit"
  variant="secondary"
  size="md"
  class="flex-1 min-h-[52px] py-3.5 rounded-xl text-sm font-semibold active:scale-95 text-center"
  tracking={{ source: 'mobile_bar_bottom', action: 'form_request', intent: 'get_quote' }}

  /* ‚úÖ Forward des data-attributes AU N≈íUD DOM du bouton */
  data={{ role: 'quote-button', 'open-popup': 'floating-bar-mobile' }}
>
  <svg class="w-4 h-4 mr-1 flex-shrink-0" fill="none" stroke="currentColor" viewBox="0 0 24 24" aria-hidden="true">
    <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2"
      d="M9 12h6m-6 4h6m2 5H7a2 2 0 01-2-2V5a2 2 0 012-2h5.586a1 1 0 01.707.293l5.414 5.414a1 1 0 01.293.707V19a2 2 0 01-2 2z" />
  </svg>
  Devis gratuit
</Button>

    </div>

    <!-- Indicateur confiance -->
    <div class="text-center pb-1">
      <div class="inline-flex items-center gap-2 text-xs text-neutral-500">
        <div class="w-2 h-2 bg-success-600 rounded-full animate-pulse"></div>
        <span>Disponible 7j/7 ‚Ä¢ Intervention rapide</span>
      </div>
    </div>
  </div>
)}

<script is:inline>
(function () {
  var bar = document.getElementById('sticky-cta');
  if (!bar) return;

  // reparenting sous <body> pour √©viter les contextes transform/stacking
  if (bar.parentElement !== document.body) {
    document.body.appendChild(bar);
  }

  // menu mobile : masque si ouvert (via attr sur <html>)
  var html = document.documentElement;
  var isMenuOpen = function () {
    return html.getAttribute('data-menu-open') === 'true';
  };

  // dataset
  var showAfter = bar.dataset.showafter || 'scroll';
  var colorMode = bar.dataset.colormode || 'progressive';
  var hideSel = bar.dataset.hideselector || '[data-hide-floating-cta]';
  var activateSel = bar.dataset.activateselector || '[data-activate-floating-cta]';
  var delay = Number(bar.dataset.activatedelay || '600');

  // helpers visibilit√©
  var showBar = function () {
    if (isMenuOpen()) return;
    bar.style.display = 'block';
    bar.setAttribute('data-state', 'shown');
    bar.style.transform = 'translateY(0)';
    bar.style.opacity = '1';
    bar.style.pointerEvents = 'auto';
  };
  var hideBar = function () {
    bar.setAttribute('data-state', 'hidden');
    bar.style.transform = 'translateY(100%)';
    bar.style.opacity = '0';
    bar.style.pointerEvents = 'none';
    window.setTimeout(function () {
      if (bar.getAttribute('data-state') === 'hidden') {
        bar.style.display = 'none';
      }
    }, 300);
  };

  // √©tat initial
  bar.style.willChange = 'transform, opacity';
  hideBar();

  // mode LP (immediate)
  if (showAfter === 'immediate') {
    showBar();
  }

  // 1) hide logic : tant que hideSel visible -> cach√© ; sinon -> montr√©
  (function () {
    var targets = Array.prototype.slice.call(document.querySelectorAll(hideSel));
    if (!('IntersectionObserver' in window) || targets.length === 0) {
      // fallback : seuil de scroll
      var onScroll = function () {
        if (window.scrollY > 120) showBar(); else hideBar();
      };
      window.addEventListener('scroll', onScroll, { passive: true });
      window.addEventListener('astro:after-swap', function () {
        window.removeEventListener('scroll', onScroll);
      });
      // √©tat initial
      onScroll();
      return;
    }

    var visibility = new Map();
    targets.forEach(function (t) { visibility.set(t, false); });

    var io = new IntersectionObserver(function (entries) {
      entries.forEach(function (e) { visibility.set(e.target, e.isIntersecting); });
      var anyVisible = false;
      visibility.forEach(function (v) { if (v) anyVisible = true; });
      if (anyVisible) hideBar(); else showBar();
    }, { threshold: 0.05, rootMargin: '-72px 0px 0px 0px' });

    targets.forEach(function (t) { io.observe(t); });

    window.addEventListener('astro:after-swap', function () {
      try { io.disconnect(); } catch (e) {}
    });
  })();

  // 2) activate logic : SEUL le bouton "devis" devient vert, et reste vert
  (function () {
    var trigger = document.querySelector(activateSel);
    if (!trigger || !('IntersectionObserver' in window)) return;

    var timer = null;
    var hasEverBeenVisible = false;
    var quoteBtn = document.querySelector('#sticky-cta [data-role="quote-button"]');
    if (!quoteBtn) return;

    var setQuoteActive = function (on) {
      if (on) quoteBtn.setAttribute('data-active', 'true');
      // ‚ö†Ô∏è on ne retire jamais l'√©tat actif (il doit rester vert)
    };

    var io = new IntersectionObserver(function (entries) {
      var e = entries[0];
      if (!e) return;

      if (e.isIntersecting) {
        hasEverBeenVisible = true;
        if (timer) { clearTimeout(timer); timer = null; }
        return; // on attend la sortie du viewport
      }

      // non intersecting : si d√©j√† vue -> activer d√©finitivement
      if (hasEverBeenVisible) {
        if (colorMode === 'progressive') {
          if (timer) clearTimeout(timer);
          timer = setTimeout(function () {
            setQuoteActive(true);
            try { io.disconnect(); } catch (err) {}
          }, delay);
        } else {
          setQuoteActive(true);
          try { io.disconnect(); } catch (err) {}
        }
      }
    }, { threshold: 0, rootMargin: '0px 0px -75% 0px' });

    io.observe(trigger);

    window.addEventListener('astro:after-swap', function () {
      try { io.disconnect(); } catch (e) {}
      if (timer) clearTimeout(timer);
    });
  })();

  // masque si menu mobile ouvert
  var onMenuOpen = function () { hideBar(); };
  var onMenuClose = function () { window.setTimeout(showBar, 360); };
  window.addEventListener('sp:menu_open', onMenuOpen);
  window.addEventListener('sp:menu_close', onMenuClose);
  window.addEventListener('astro:after-swap', function () {
    window.removeEventListener('sp:menu_open', onMenuOpen);
    window.removeEventListener('sp:menu_close', onMenuClose);
  });

  // tracking l√©ger
  bar.addEventListener('click', function (ev) {
    var el = ev.target.closest('a[href^="tel:"], button, a[data-open-popup]');
    if (!el || !window.gtag) return;
    var action = (el.getAttribute('href') || '').startsWith('tel:') ? 'phone_call' : 'form_request';
    window.gtag('event', action, { event_category: 'mobile_cta', event_label: 'floating_bottom_bar' });
  });
})();
</script>

<style is:global>
/* Visibilit√© (pilot√©e par data-state) */
#sticky-cta[data-state="shown"] { display: block; transform: translateY(0); opacity: 1; pointer-events: auto; }
#sticky-cta[data-state="hidden"] { transform: translateY(100%); opacity: 0; pointer-events: none; }

/* Masque si menu mobile ouvert */
html[data-menu-open="true"] #sticky-cta { display: none !important; }

/* Activation visuelle ‚Äî seulement le bouton de droite */
#sticky-cta [data-role="quote-button"][data-active="true"] {
  background-color: var(--color-action-500) !important;
  color: #fff !important;
  border-color: var(--color-action-500) !important;
  transition: background-color .4s ease, color .4s ease, border-color .4s ease;
}
#sticky-cta [data-role="quote-button"][data-active="true"]:hover {
  background-color: var(--color-action-600) !important;
}
</style>
