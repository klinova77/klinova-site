---
import { Image } from 'astro:assets';

interface Props {
  src: ImageMetadata;
  alt: string;
  caption?: string;
  maxWidth?: number;
  eager?: boolean;
  sizes?: string;
  class?: string;
  figureClass?: string;
}

const { 
  src, 
  alt, 
  caption, 
  maxWidth = 768,
  eager = false,
  sizes: customSizes,
  class: imageClass = '',
  figureClass = ''
} = Astro.props;

// Génération automatique des largeurs
const baseWidths = [320, 480, 640, 768, 1024, 1280, 1600];
const widths = baseWidths.filter(w => w <= Math.max(maxWidth * 1.5, 768));

// Sizes par défaut (mobile-first)
const defaultSizes = [
  '(max-width: 480px) 92vw',
  `(max-width: ${maxWidth}px) 85vw`,
  `${maxWidth}px`
].join(', ');
const finalSizes = customSizes || defaultSizes;

// Classes finales
const figureClasses = [
  'mx-auto mb-6 transition-all duration-300',
  figureClass
].filter(Boolean).join(' ');

const imageClasses = [
  'rounded-lg shadow-soft hover:shadow-soft-lg transition-shadow duration-300',
  imageClass
].filter(Boolean).join(' ');
---

<figure 
  class={figureClasses}
  style={`max-width: ${maxWidth}px`}
  itemscope 
  itemtype="https://schema.org/ImageObject"
>
  <Image
    src={src}
    alt={alt}
    widths={widths}
    sizes={finalSizes}
    format={["avif", "webp"]}
    quality={85}
    loading={eager ? "eager" : "lazy"}
    decoding="async"
    class={imageClasses}
    itemprop="contentUrl"
  />
  
  {caption && (
    <figcaption 
      class="mt-3 text-sm text-neutral-600 leading-relaxed px-2 text-center"
      itemprop="caption"
    >
      {caption}
    </figcaption>
  )}

  <meta itemprop="description" content={alt} />
  <meta itemprop="name" content={caption || alt} />
</figure>

<style>
  figure {
    scroll-margin-top: 2rem; /* accessibilité */
  }
  img {
    height: auto;
    max-width: 100%;
  }
  figure:hover img {
    transform: scale(1.02);
  }
</style>
