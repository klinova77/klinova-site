---
import { mainNav as _mainNav } from '~/lib/nav.ts';
import CtaDevis from '~/components/UI/CtaDevis.astro';
import CtaPhone from '~/components/UI/CtaPhone.astro';
import { LINKS } from '~/lib/links';
import Button from '~/components/UI/Button.astro';

const items = Array.isArray(_mainNav) ? _mainNav : [];
const current = Astro.url.pathname.replace(/\/+$/, '');
const isActive = (href: string) =>
  current === href || (href !== '/' && current.startsWith(href));

const hideCTAInit = ['/contact'].includes(current);
---
<!-- ===== BARRE DU HAUT STICKY ===== -->
<div
  id="topBar"
  class="sticky top-0 z-[60] backdrop-blur border-b"
  style="
    background-color: color-mix(in srgb, var(--color-neutral-50) 95%, transparent);
    border-color: var(--color-sp-line);
  "
>
  <div class="container-responsive py-3 lg:py-4">
    <div class="flex items-center justify-between gap-4">
      <!-- Logo -->
      <a href="/" class="flex items-center space-x-3 shrink-0" aria-label="Accueil">
        <div
          class="w-10 h-10 rounded-lg flex items-center justify-center shadow-soft"
          style="background: var(--color-primary-600);"
        >
          <span class="text-white font-bold text-lg leading-none">SP</span>
        </div>
        <div class="leading-tight">
          <span class="block text-xl font-semibold text-primary-600">Stop Punaises</span>
          <span class="block text-xs text-neutral-500 uppercase tracking-wide">Expert Paris & IDF</span>
        </div>
      </a>

      <!-- CTA desktop -->
      <div
        id="header-cta-buttons"
        class="hidden lg:flex items-center gap-3 shrink-0"
        data-hidden={hideCTAInit ? 'true' : 'false'}
      >
        <Button
          href="tel:+33630221228"
          ariaLabel="Appeler Stop-Punaises au 06 30 22 12 28"
          variant="primary"
          size="md"
          class="flex items-center gap-2 px-6 py-2.5 rounded-xl font-semibold"
          tracking={{ source: 'header', action: 'call' }}
        >
          <svg class="w-5 h-5 text-white" fill="none" stroke="currentColor" stroke-width="2" viewBox="0 0 24 24">
            <path stroke-linecap="round" stroke-linejoin="round"
              d="M3 5a2 2 0 012-2h3.28a1 1 0 01.948.684l1.498 4.493a1 1 0 01-.502 1.21l-2.257 1.13a11.042 11.042 0 005.516 5.516l1.13-2.257a1 1 0 011.21-.502l4.493 1.498a1 1 0 01.684.949V19a2 2 0 01-2 2h-1C9.716 21 3 14.284 3 6V5z" />
          </svg>
          <span class="font-bold tracking-wide text-white">06 30 22 12 28</span>
        </Button>

        <Button
          href="/contact"
          ariaLabel="Demander un devis gratuit"
          variant="secondary"
          size="md"
          class="flex items-center gap-2 font-semibold"
          tracking={{ source: 'header', action: 'form_popup' }}
          data={{ 'open-popup': 'cta', category: 'conversion', channel: 'form' }}
        >
          <svg class="w-5 h-5" fill="none" stroke="currentColor" stroke-width="2" viewBox="0 0 24 24">
            <path stroke-linecap="round" stroke-linejoin="round"
              d="M9 12h6m-6 4h6m2 5H7a2 2 0 01-2-2V5a2 2 0 012-2h5.586a1 1 0 01.707.293l5.414 5.414a1 1 0 01.293.707V19a2 2 0 01-2 2z" />
          </svg>
          <span class="tracking-wide">Devis gratuit</span>
        </Button>
      </div>

      <!-- Burger -->
      <button
        id="menuButton"
        class="lg:hidden inline-flex items-center justify-center w-10 h-10 rounded-xl border shadow-soft bg-white/90 border-[var(--color-sp-line)] hover:bg-[var(--color-neutral-100)]"
        aria-label="Menu"
        aria-expanded="false"
        aria-controls="mobileMenu"
      >
        <span id="menuLabel" class="sr-only">Ouvrir le menu</span>
        <svg xmlns="http://www.w3.org/2000/svg" class="w-5 h-5" viewBox="0 0 24 24" fill="currentColor">
          <path id="icon-burger" d="M3 6h18v2H3V6zm0 5h18v2H3v-2zm0 5h18v2H3v-2z" />
          <path id="icon-close" class="hidden"
            d="M18.3 5.71a.996.996 0 0 0-1.41 0L12 10.59 7.11 5.7A.996.996 0 1 0 5.7 7.11L10.59 12 5.7 16.89a.996.996 0 1 0 1.41 1.41L12 13.41l4.89 4.89a.996.996 0 1 0 1.41-1.41L13.41 12l4.89-4.89c.38-.38.38-1.02 0-1.4z" />
        </svg>
      </button>
    </div>
  </div>
  <div class="hidden lg:block border-t" style="border-color: var(--color-sp-line)"></div>
</div>

<!-- ===== NAV DESKTOP + MENU MOBILE ===== -->
<header class="border-b" style="border-color: var(--color-sp-line)">
  <div class="container-responsive">
    <div class="hidden lg:block">
      <nav class="flex -mx-2" aria-label="Navigation principale">
        {items.map((item) => {
          const active = isActive(item.href);
          return (
            <a
              href={item.href}
              aria-current={active ? 'page' : undefined}
              class={[
                'group relative flex-1 px-2 py-3 text-center text-sm font-medium border-r last:border-r-0',
                'border-[var(--color-sp-line)] text-neutral-800 hover:text-primary-700',
                active ? 'text-primary-700 font-semibold' : ''
              ].join(' ')}
              data-source="header"
              data-action="nav"
            >
              <span>{item.label}</span>
            </a>
          );
        })}
      </nav>
    </div>
  </div>

  <!-- ===== MENU MOBILE ===== -->
  <div
    id="mobileMenu"
    class="lg:hidden fixed inset-x-0 top-[64px] z-[80] rounded-b-2xl border-b shadow-2xl"
    style="background: rgba(255,255,255,.96); border-color: var(--color-sp-line);"
    data-state="closed"
    aria-hidden="true"
  >
    <div class="container-responsive py-4">
      <nav class="flex flex-col gap-2 mb-4" aria-label="Navigation mobile">
        {items.map((item) => {
          const active = isActive(item.href);
          return (
            <a
              href={item.href}
              aria-current={active ? 'page' : undefined}
              class={[
                'block px-4 py-3 rounded-lg font-medium relative',
                active
                  ? 'text-primary-700 font-semibold'
                  : 'text-neutral-800 hover:bg-[var(--kl-bg-green)] hover:text-primary-700'
              ].join(' ')}
              data-source="mobile_menu"
              data-action="nav"
            >
              {item.label}
            </a>
          );
        })}
      </nav>

      <!-- CTA mobile -->
      <div class="space-y-3 pt-4 border-t" style="border-color: var(--color-sp-line)">
        <CtaPhone
          size="md"
          variant="primary"
          className="w-full justify-center"
          phoneE164="+33630221228"
          display="06 30 22 12 28"
          trackingData={{ source: 'mobile_menu', action: 'call' }}
          showDisplayNext={true}
        />
        <Button
          href="/contact#formulaire"
          label="Demander un devis gratuit"
          variant="secondary"
          size="md"
          class="w-full justify-center"
          tracking={{ source: 'mobile_menu', action: 'lead' }}
          data={{ 'open-popup': 'cta' }}
        />
      </div>
    </div>
  </div>
</header>

<!-- ===== SCRIPT : Menu + CTA ===== -->
<script is:inline>
document.addEventListener('DOMContentLoaded', () => {
  if (window.__headerMenuInitialized) return;
  window.__headerMenuInitialized = true;

  const btn=document.getElementById('menuButton');
  const menu=document.getElementById('mobileMenu');
  const menuLabel=document.getElementById('menuLabel');
  const iconBurger=document.getElementById('icon-burger');
  const iconClose=document.getElementById('icon-close');
  const stickyBar=document.getElementById('sticky-cta');
  let lastFocused=null;
  if(!(btn&&menu&&menuLabel&&iconBurger&&iconClose))return;

  const open=()=>{
    if(stickyBar)stickyBar.style.display='none';
    lastFocused=document.activeElement;
    menu.dataset.state='open';
    menu.setAttribute('aria-hidden','false');
    btn.setAttribute('aria-expanded','true');
    iconBurger.classList.add('hidden');
    iconClose.classList.remove('hidden');
    menuLabel.textContent='Fermer le menu';
    document.documentElement.classList.add('overflow-hidden');
    document.documentElement.setAttribute('data-menu-open','true');
    const first=menu.querySelector('a,button,[tabindex]:not([tabindex="-1"])');
    if(first)first.focus({preventScroll:true});
    window.dispatchEvent(new CustomEvent('sp:menu_open'));
  };

  const close=()=>{
    menu.dataset.state='closed';
    menu.setAttribute('aria-hidden','true');
    btn.setAttribute('aria-expanded','false');
    iconClose.classList.add('hidden');
    iconBurger.classList.remove('hidden');
    menuLabel.textContent='Ouvrir le menu';
    document.documentElement.classList.remove('overflow-hidden');
    document.documentElement.removeAttribute('data-menu-open');
    if(lastFocused&&typeof lastFocused.focus==='function')lastFocused.focus();
    window.dispatchEvent(new CustomEvent('sp:menu_close'));
  };

  const toggle=()=>menu.dataset.state==='open'?close():open();
  btn.addEventListener('click',e=>{e.preventDefault();e.stopPropagation();toggle();});
  menu.querySelectorAll('a').forEach(l=>l.addEventListener('click',()=>{if(menu.dataset.state==='open')close();}));
  menu.addEventListener('click',e=>{if(e.target===menu&&menu.dataset.state==='open')close();});
  document.addEventListener('keydown',e=>{if(e.key==='Escape'&&menu.dataset.state==='open')close();});

  const topBar=document.getElementById('topBar');
  if(topBar){
    const onScrollShadow=()=>{topBar.style.boxShadow=(window.scrollY>2)?'0 6px 18px rgba(0,0,0,0.06)':'none';};
    onScrollShadow();window.addEventListener('scroll',onScrollShadow,{passive:true});
  }
});
</script>

<script is:inline>
document.addEventListener('DOMContentLoaded',()=>{
  const cta=document.getElementById('header-cta-buttons');
  const bar=document.getElementById('topBar');
  if(!cta||!bar)return;
  if(window.location.pathname.startsWith('/contact')){
    cta.setAttribute('data-hidden','true');return;
  }
  const setHidden=h=>cta.setAttribute('data-hidden',h?'true':'false');
  if(cta.dataset.hidden==='true')setHidden(true);
  const hero=document.querySelector('[data-hero]')||document.getElementById('hero');
  if(hero&&'IntersectionObserver'in window){
    const obs=new IntersectionObserver(([e])=>setHidden(!!e.isIntersecting&&e.intersectionRatio>0.1),
      {rootMargin:'-72px 0px 0px 0px',threshold:[0,.1,.2,.5,1]});
    obs.observe(hero);
  }else{
    const nearTop=()=>setHidden(window.scrollY<160);
    nearTop();window.addEventListener('scroll',nearTop,{passive:true});
  }
});
</script>
